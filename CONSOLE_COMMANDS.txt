# SHUTDOWN DOCKER CONTAINERS
docker-compose down

# REBUILD DOCKER
docker-compose build 

# START DOCKER
docker-compose up -d 

# RUN MANAGE.PY INSIDE DOCKER
docker-compose exec web python manage.py runserver

# REBUILD FROM SCRATCH
docker-compose down && docker-compose build --no-cache && docker-compose up -d


#---------------------------------
#Train All Models (DKT + SAKT + Adaptive Path LSTM):
docker-compose exec web python manage.py train_models --epochs 15

# Train with more epochs for better accuracy
docker-compose exec web python manage.py train_models --epochs 25

# Train with specific batch size
docker-compose exec web python manage.py train_models --epochs 15 --batch-size 64


#------------------------------------
# Generate learning paths for all students (detailed output + auto-save)
docker-compose exec web python manage.py generate_learning_paths --all-students

# Generate with summary output (faster, still auto-saves)
docker-compose exec web python manage.py generate_learning_paths --all-students --output-format summary

# Generate with JSON output (for API integration)
docker-compose exec web python manage.py generate_learning_paths --all-students --output-format json

#--------------------------------------
# Generate for specific student (detailed output + auto-save)
docker-compose exec web python manage.py generate_learning_paths --student-id A00000001

# Generate for specific student with summary
docker-compose exec web python manage.py generate_learning_paths --student-id A00000001 --output-format summary

# Generate for specific student with JSON output
docker-compose exec web python manage.py generate_learning_paths --student-id A00000001 --output-format json


#-----------------------------------------
# Update mastery predictions using latest trained models, then generate paths
docker-compose exec web python manage.py generate_learning_paths --all-students --update-predictions

# For specific student with prediction updates
docker-compose exec web python manage.py generate_learning_paths --student-id A00000001 --update-predictions




#-----------------------------------
 Step 1: Make Model smarter with new data
docker-compose exec web python manage.py train_models --epochs 100

# Step 2: Use new smart AI to re-analyze all students
docker-compose exec web python manage.py generate_learning_paths --all-students --update-predictions

# Quick generation using latest analysis
docker-compose exec web python manage.py generate_learning_paths --all-students


#-----------------------------------
# COMPREHENSIVE MODEL EVALUATION 
#-----------------------------------

# Evaluate all trained models with comprehensive metrics (precision, recall, F1, AUC, calibration)
docker-compose exec web python manage.py evaluate_models

# Evaluate with baseline comparisons (random, majority class, topic/student averages)
docker-compose exec web python manage.py evaluate_models --include-baselines

# Evaluate and save predictions for detailed analysis
docker-compose exec web python manage.py evaluate_models --include-baselines --save-predictions

# Evaluate specific models only
docker-compose exec web python manage.py evaluate_models --models dkt sakt --include-baselines

# Evaluate with custom output directory
docker-compose exec web python manage.py evaluate_models --include-baselines --output-dir custom_evaluation_results


#-----------------------------------
# ENHANCED TRAINING WITH COMPREHENSIVE EVALUATION (UPDATED)
#-----------------------------------
# NOTE: The existing train_models command now automatically includes:
# - Precision, Recall, F1-Score, AUC, Brier Score, Expected Calibration Error
# - Baseline model comparisons (random, majority class, topic/student averages)
# - Per-topic performance analysis
# - Experiment tracking and reproducibility (fixed seeds)
# - Comprehensive evaluation reports saved to evaluation_results/

# Your existing training commands now provide much more detailed evaluation:
# docker-compose exec web python manage.py train_models --epochs 25


#-----------------------------------
# COMPLETE WORKFLOW 
#-----------------------------------

# Step 1: Train models with comprehensive evaluation (now includes all metrics Dr. Fu requested)
docker-compose exec web python manage.py train_models --epochs 50

# Step 2: Run standalone comprehensive evaluation with all metrics and baseline comparisons
docker-compose exec web python manage.py evaluate_models --include-baselines --save-predictions

# Step 3: Use improved models for learning path generation
docker-compose exec web python manage.py generate_learning_paths --all-students --update-predictions
