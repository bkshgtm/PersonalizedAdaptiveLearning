questions:

- question_id: JAVA-PROG-001
  text: What is the purpose of the main method in a Java program?
  question_type: short_answer
  topic: Java Program Structure and Compilation
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: "The main method serves as the entry point for a Java program. When a Java program is executed, the JVM looks for the main method and starts execution from there. It must have the signature: public static void main(String[] args)"
  sample_student_answers:
  - text: The main method is where the program starts running. It's the entry point.
    correct: true
    score: 1
  - text: It's the first method that gets called when you run a Java program.
    correct: true
    score: 0.9
  - text: Main method is where you put your code to run the program.
    correct: true
    score: 0.7
  - text: It's like the starting point of the program.
    correct: true
    score: 0.6
  - text: Main method runs all the other methods.
    correct: false
    score: 0.3
  - text: It's the most important method in Java.
    correct: false
    score: 0.2
  - text: Main method controls the whole program.
    correct: false
    score: 0.2
  - text: I think it's where you declare variables?
    correct: false
    score: 0
  - text: Not sure, maybe it's for compilation?
    correct: false
    score: 0
  - text: It's the method that prints output.
    correct: false
    score: 0
- question_id: JAVA-PROG-002
  text: Which of the following is the correct way to compile a Java source file named 'Hello.java'?
  question_type: mcq
  topic: Java Program Structure and Compilation
  difficulty: 2
  cognitive_level: application
  reference_answer: javac Hello.java - This command compiles the Java source file and creates a bytecode file (Hello.class)
  sample_student_answers:
  - text: javac Hello.java
    correct: true
    score: 1
  - text: java Hello.java
    correct: false
    score: 0
  - text: compile Hello.java
    correct: false
    score: 0
  - text: javac Hello
    correct: false
    score: 0
  - text: java -c Hello.java
    correct: false
    score: 0
  - text: javac Hello.class
    correct: false
    score: 0
  - text: I think it's javac but not sure about the extension
    correct: false
    score: 0.2
  - text: Something with javac I think
    correct: false
    score: 0.1
  - text: Use the compiler command
    correct: false
    score: 0
  - text: No idea
    correct: false
    score: 0
- question_id: JAVA-PROG-003
  text: "True or False: A Java source file can contain multiple public classes."
  question_type: true_false
  topic: Java Program Structure and Compilation
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: False. A Java source file can contain only one public class, and the filename must match the public class name.
  sample_student_answers:
  - text: "False"
    correct: true
    score: 1
  - text: False, only one public class per file
    correct: true
    score: 1
  - text: False, the filename has to match the public class
    correct: true
    score: 1
  - text: "True"
    correct: false
    score: 0
  - text: True, you can have as many as you want
    correct: false
    score: 0
  - text: True, but they have to be related
    correct: false
    score: 0
  - text: False, but you can have multiple private classes
    correct: false
    score: 0.5
  - text: I think False but not completely sure
    correct: true
    score: 0.7
  - text: True? I'm guessing
    correct: false
    score: 0
  - text: Don't know
    correct: false
    score: 0
- question_id: JAVA-PROG-004
  text: "Fill in the blank: A Java program is first compiled into _______ which is then interpreted by the JVM."
  question_type: fill_blank
  topic: Java Program Structure and Compilation
  difficulty: 3
  cognitive_level: comprehension
  reference_answer: bytecode
  sample_student_answers:
  - text: bytecode
    correct: true
    score: 1
  - text: byte code
    correct: true
    score: 1
  - text: machine code
    correct: false
    score: 0.3
  - text: object code
    correct: false
    score: 0.2
  - text: binary code
    correct: false
    score: 0.2
  - text: assembly code
    correct: false
    score: 0.1
  - text: intermediate code
    correct: false
    score: 0.4
  - text: class files
    correct: false
    score: 0.3
  - text: compiled code
    correct: false
    score: 0.2
  - text: not sure
    correct: false
    score: 0
- question_id: JAVA-PROG-005
  text: |
    What will happen when you try to compile and run this program?
    ```java
    public class Test {
        public static void main(String[] args) {
            System.out.println("Hello World");
        }
    }
    ```
    But the file is saved as 'MyProgram.java'
  question_type: code_analysis
  topic: Java Program Structure and Compilation
  difficulty: 3
  cognitive_level: analysis
  reference_answer: The program will not compile. You'll get a compilation error because the public class name 'Test' does not match the filename 'MyProgram.java'. The filename must match the public class name exactly.
  sample_student_answers:
  - text: Compilation error - filename must match the public class name
    correct: true
    score: 1
  - text: Won't compile because Test doesn't match MyProgram.java
    correct: true
    score: 1
  - text: "Error: class name and file name don't match"
    correct: true
    score: 0.9
  - text: It will print Hello World
    correct: false
    score: 0
  - text: Runtime error
    correct: false
    score: 0.1
  - text: The program will run but with warnings
    correct: false
    score: 0
  - text: Compilation error but not sure why
    correct: false
    score: 0.3
  - text: Something wrong with the class declaration
    correct: false
    score: 0.2
  - text: File naming issue
    correct: false
    score: 0.4
  - text: No idea what will happen
    correct: false
    score: 0
- question_id: JAVA-PROG-006
  text: |
    Complete this basic Java program structure:
    ```java
    _______ class HelloWorld {
        _______ static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
    ```
  question_type: coding
  topic: Java Program Structure and Compilation
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    public class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
  sample_student_answers:
  - text: |
      public class HelloWorld {
          public static void main(String[] args) {
              System.out.println("Hello, World!");
          }
      }
    correct: true
    score: 1
  - text: public, public
    correct: true
    score: 1
  - text: public class and public static
    correct: true
    score: 0.9
  - text: public for both blanks
    correct: true
    score: 0.8
  - text: class HelloWorld, static void main
    correct: false
    score: 0.4
  - text: private class HelloWorld
    correct: false
    score: 0.3
  - text: public, private
    correct: false
    score: 0.5
  - text: static, public
    correct: false
    score: 0.3
  - text: I know main needs public but not sure about class
    correct: false
    score: 0.4
  - text: Both need some kind of access modifier
    correct: false
    score: 0.2
- question_id: JAVA-COMM-001
  text: What are the three types of comments in Java and how are they written?
  question_type: short_answer
  topic: Comments and Print Statements
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: "The three types of comments in Java are: 1) Single-line comments (//), 2) Multi-line comments (/* */), and 3) Documentation comments (/** */)"
  sample_student_answers:
  - text: Single-line //, multi-line /* */, and documentation /** */
    correct: true
    score: 1
  - text: // for single line, /* */ for multiple lines, /** */ for javadoc
    correct: true
    score: 1
  - text: //, /* */, /** */
    correct: true
    score: 0.8
  - text: Single line, multi-line, and javadoc comments
    correct: true
    score: 0.8
  - text: Two slashes, star comments, and documentation
    correct: true
    score: 0.6
  - text: // and /* */ and one more type
    correct: false
    score: 0.4
  - text: Single and multi-line comments
    correct: false
    score: 0.4
  - text: Comments with // and /**/
    correct: false
    score: 0.3
  - text: I know // but not sure about others
    correct: false
    score: 0.2
  - text: Only know single-line comments
    correct: false
    score: 0.1
- question_id: JAVA-COMM-002
  text: Which method is used to print output to the console without adding a newline character?
  question_type: mcq
  topic: Comments and Print Statements
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: System.out.print() - This method prints to console without adding a newline character at the end
  sample_student_answers:
  - text: System.out.print()
    correct: true
    score: 1
  - text: System.out.println()
    correct: false
    score: 0
  - text: System.out.printf()
    correct: false
    score: 0.2
  - text: print()
    correct: false
    score: 0.3
  - text: System.print()
    correct: false
    score: 0.2
  - text: out.print()
    correct: false
    score: 0.1
  - text: System.out.write()
    correct: false
    score: 0
  - text: I think it's print but not sure about System.out
    correct: false
    score: 0.3
  - text: Something with print
    correct: false
    score: 0.1
  - text: Don't remember
    correct: false
    score: 0
- question_id: JAVA-COMM-003
  text: "True or False: Documentation comments (/** */) can be used to generate API documentation automatically."
  question_type: true_false
  topic: Comments and Print Statements
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: True. Documentation comments are used by the javadoc tool to generate HTML documentation for Java APIs.
  sample_student_answers:
  - text: "True"
    correct: true
    score: 1
  - text: True, they're for javadoc
    correct: true
    score: 1
  - text: True, used by javadoc tool
    correct: true
    score: 1
  - text: "False"
    correct: false
    score: 0
  - text: False, they're just regular comments
    correct: false
    score: 0
  - text: True, but I'm not sure what API documentation means
    correct: true
    score: 0.7
  - text: I think True
    correct: true
    score: 0.6
  - text: False, documentation is separate
    correct: false
    score: 0
  - text: Not sure about documentation comments
    correct: false
    score: 0
  - text: I'll guess True
    correct: true
    score: 0.5
- question_id: JAVA-COMM-004
  text: 'Complete the following print statement: System.out._______("The answer is " + 42);'
  question_type: fill_blank
  topic: Comments and Print Statements
  difficulty: 1
  cognitive_level: application
  reference_answer: println
  sample_student_answers:
  - text: println
    correct: true
    score: 1
  - text: print
    correct: true
    score: 0.8
  - text: printf
    correct: false
    score: 0.3
  - text: write
    correct: false
    score: 0
  - text: display
    correct: false
    score: 0
  - text: show
    correct: false
    score: 0
  - text: output
    correct: false
    score: 0
  - text: format
    correct: false
    score: 0
  - text: I think println but not 100% sure
    correct: true
    score: 0.8
  - text: Something with print
    correct: false
    score: 0.2
- question_id: JAVA-COMM-005
  text: |
    What will be the output of this code?
    ```java
    System.out.print("Hello ");
    System.out.print("World");
    System.out.println("!");
    System.out.println("Java");
    ```
  question_type: code_analysis
  topic: Comments and Print Statements
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    Hello World!
    Java
  sample_student_answers:
  - text: |
      Hello World!
      Java
    correct: true
    score: 1
  - text: |-
      Hello World!
      Java
    correct: true
    score: 1
  - text: Hello World! on first line, Java on second line
    correct: true
    score: 0.9
  - text: |
      Hello World!
      Java
      (two lines)
    correct: true
    score: 0.8
  - text: Hello World Java
    correct: false
    score: 0.3
  - text: |
      Hello 
      World
      !
      Java
    correct: false
    score: 0
  - text: |
      Hello World!
      Java
    correct: true
    score: 0.9
  - text: "All on one line: Hello World!Java"
    correct: false
    score: 0.2
  - text: Not sure about the spacing and newlines
    correct: false
    score: 0.1
  - text: Something with Hello World and Java
    correct: false
    score: 0.2
- question_id: JAVA-COMM-006
  text: >
    Write a program that prints your name and age using separate print statements. Use comments to explain each line.

    ```java

    public class PersonInfo {
        public static void main(String[] args) {
            // Your code here
        }
    }

    ```
  question_type: coding
  topic: Comments and Print Statements
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    public class PersonInfo {
        public static void main(String[] args) {
            // Print my name
            System.out.println("My name is John");
            // Print my age
            System.out.println("I am 20 years old");
        }
    }
  sample_student_answers:
  - text: |
      // Print my name
      System.out.println("My name is Alice");
      // Print my age
      System.out.println("I am 19 years old");
    correct: true
    score: 1
  - text: |
      System.out.println("Name: Bob"); // prints name
      System.out.println("Age: 21"); // prints age
    correct: true
    score: 0.9
  - text: |
      // This prints my personal information
      System.out.println("Sarah");
      System.out.println("22");
    correct: true
    score: 0.8
  - text: |
      System.out.println("My name is Mike");
      System.out.println("My age is 18");
    correct: false
    score: 0.6
  - text: |
      /* Print name and age */
      System.out.println("Tom, 20");
    correct: false
    score: 0.4
  - text: |
      // Name
      print("Lisa");
      // Age  
      print("19");
    correct: false
    score: 0.3
  - text: |
      System.out.print("Name and age");
    correct: false
    score: 0.1
  - text: |
      // I don't know how to print
      System.println("Help");
    correct: false
    score: 0
  - text: I'm not sure about the syntax
    correct: false
    score: 0
  - text: ""
    correct: false
    score: 0
- question_id: JAVA-VAR-001
  text: What is the difference between primitive and reference types in Java? Give examples of each.
  question_type: short_answer
  topic: Variables and Data Types
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: Primitive types store actual values directly in memory (int, double, boolean, char, byte, short, long, float). Reference types store memory addresses pointing to objects (String, arrays, user-defined classes). Primitive types are stored on the stack, while reference type objects are stored on the heap.
  sample_student_answers:
  - text: Primitive types store values directly (int, double, boolean), reference types store addresses to objects (String, arrays).
    correct: true
    score: 1
  - text: "Primitive: int, double, char. Reference: String, Object, arrays. Primitive store actual data, reference store pointers."
    correct: true
    score: 1
  - text: Primitive types hold actual values, reference types point to objects in memory.
    correct: true
    score: 0.8
  - text: Primitive are built-in types like numbers, reference are classes and objects.
    correct: true
    score: 0.7
  - text: Primitive types are faster, reference types can be null.
    correct: false
    score: 0.4
  - text: Primitive are simple data, reference are complex data.
    correct: false
    score: 0.3
  - text: int, double are primitive. String is reference. Primitive can't be null.
    correct: false
    score: 0.6
  - text: Primitive types are all numbers, reference types are everything else.
    correct: false
    score: 0.2
  - text: I know int is primitive and String is reference but not sure why.
    correct: false
    score: 0.3
  - text: They're just different types of variables.
    correct: false
    score: 0.1
- question_id: JAVA-VAR-002
  text: Which of the following variable declarations is INVALID in Java?
  question_type: mcq
  topic: Variables and Data Types
  difficulty: 2
  cognitive_level: analysis
  reference_answer: int 2ndNumber; - Variable names cannot start with a digit in Java
  sample_student_answers:
  - text: int 2ndNumber;
    correct: true
    score: 1
  - text: int _count;
    correct: false
    score: 0
  - text: double $price;
    correct: false
    score: 0
  - text: String firstName;
    correct: false
    score: 0
  - text: boolean isValid;
    correct: false
    score: 0
  - text: The one starting with a number
    correct: true
    score: 0.8
  - text: Variables can't start with digits
    correct: true
    score: 0.7
  - text: I think the underscore one is wrong
    correct: false
    score: 0
  - text: The dollar sign one looks suspicious
    correct: false
    score: 0
  - text: Not sure about Java naming rules
    correct: false
    score: 0
- question_id: JAVA-VAR-003
  text: "True or False: Local variables in Java are automatically initialized with default values."
  question_type: true_false
  topic: Variables and Data Types
  difficulty: 3
  cognitive_level: knowledge
  reference_answer: False. Local variables must be explicitly initialized before use. Only instance and class variables get default values automatically.
  sample_student_answers:
  - text: "False"
    correct: true
    score: 1
  - text: False, local variables must be initialized before use
    correct: true
    score: 1
  - text: False, only instance variables get default values
    correct: true
    score: 1
  - text: "True"
    correct: false
    score: 0
  - text: True, all variables get default values
    correct: false
    score: 0
  - text: True, int gets 0, boolean gets false
    correct: false
    score: 0
  - text: False, you'll get a compilation error if not initialized
    correct: true
    score: 0.9
  - text: I think False but not sure about the difference between local and instance
    correct: true
    score: 0.6
  - text: True for primitive types, false for reference types
    correct: false
    score: 0.2
  - text: Not sure about initialization rules
    correct: false
    score: 0
- question_id: JAVA-VAR-004
  text: "Fill in the blank: The _______ data type in Java can store values from -128 to 127."
  question_type: fill_blank
  topic: Variables and Data Types
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: byte
  sample_student_answers:
  - text: byte
    correct: true
    score: 1
  - text: short
    correct: false
    score: 0
  - text: int
    correct: false
    score: 0
  - text: char
    correct: false
    score: 0
  - text: long
    correct: false
    score: 0
  - text: integer
    correct: false
    score: 0
  - text: small
    correct: false
    score: 0
  - text: I think byte but not sure about the range
    correct: true
    score: 0.7
  - text: Some small integer type
    correct: false
    score: 0.2
  - text: The smallest number type
    correct: false
    score: 0.1
- question_id: JAVA-VAR-005
  text: |
    What will be the output of this code?
    ```java
    int x = 10;
    double y = 3.5;
    int result = x + (int)y;
    System.out.println(result);
    ```
  question_type: code_analysis
  topic: Variables and Data Types
  difficulty: 3
  cognitive_level: application
  reference_answer: 13 - The double y (3.5) is cast to int (3), then added to x (10), resulting in 13
  sample_student_answers:
  - text: "13"
    correct: true
    score: 1
  - text: 13 (3.5 cast to 3, then 10 + 3 = 13)
    correct: true
    score: 1
  - text: 10 + 3 = 13 because (int)3.5 becomes 3
    correct: true
    score: 1
  - text: "13.5"
    correct: false
    score: 0
  - text: "13.0"
    correct: false
    score: 0.2
  - text: Compilation error
    correct: false
    score: 0
  - text: "10"
    correct: false
    score: 0
  - text: The cast truncates 3.5 to 3, so result is 13
    correct: true
    score: 0.9
  - text: Can't add int and double
    correct: false
    score: 0
  - text: Not sure how casting works
    correct: false
    score: 0.1
- question_id: JAVA-VAR-006
  text: |
    Declare and initialize variables for the following:
    - A student's age (whole number)
    - A student's GPA (decimal number)
    - A student's name
    - Whether the student is enrolled (true/false)

    ```java
    public class Student {
        public static void main(String[] args) {
            // Your variable declarations here
        }
    }
    ```
  question_type: coding
  topic: Variables and Data Types
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    int age = 20;
    double gpa = 3.75;
    String name = "John Doe";
    boolean isEnrolled = true;
  sample_student_answers:
  - text: |
      int age = 20;
      double gpa = 3.8;
      String name = "Alice";
      boolean isEnrolled = true;
    correct: true
    score: 1
  - text: |
      int age = 19;
      float gpa = 3.5f;
      String name = "Bob";
      boolean isEnrolled = false;
    correct: true
    score: 0.9
  - text: |
      int studentAge = 21;
      double studentGPA = 3.2;
      String studentName = "Carol";
      boolean enrolled = true;
    correct: true
    score: 1
  - text: |
      int age;
      double gpa;
      String name;
      boolean isEnrolled;
    correct: false
    score: 0.4
  - text: |
      age = 20;
      gpa = 3.7;
      name = "Dave";
      isEnrolled = true;
    correct: false
    score: 0.5
  - text: |
      int age = 18;
      double gpa = 4.0;
      char name = "Eve";
      boolean isEnrolled = 1;
    correct: false
    score: 0.3
  - text: |
      integer age = 22;
      decimal gpa = 3.9;
      string name = "Frank";
      bool isEnrolled = true;
    correct: false
    score: 0
  - text: |
      int age = "20";
      double gpa = 3.6;
      String name = "Grace";
      boolean isEnrolled = true;
    correct: false
    score: 0.6
  - text: I know int and String but not sure about decimal and boolean types
    correct: false
    score: 0.2
  - text: Need help with variable syntax
    correct: false
    score: 0
- question_id: JAVA-ARITH-001
  text: What is the difference between the / operator and the % operator in Java?
  question_type: short_answer
  topic: Arithmetic and Assignment Operators
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: The / operator performs division and returns the quotient, while the % operator (modulus) returns the remainder after division. For integers, / performs integer division (truncates decimal part), while % gives the remainder.
  sample_student_answers:
  - text: / does division and gives the result, % gives the remainder after division.
    correct: true
    score: 1
  - text: Division operator divides numbers, modulus operator gives what's left over.
    correct: true
    score: 0.9
  - text: / is for dividing, % is for finding remainder.
    correct: true
    score: 0.8
  - text: / operator divides two numbers, % operator does modular arithmetic.
    correct: true
    score: 0.7
  - text: Both are division operators but % gives remainder.
    correct: true
    score: 0.6
  - text: / is normal division, % is special division.
    correct: false
    score: 0.3
  - text: "% is percentage operator, / is division."
    correct: false
    score: 0.2
  - text: I think they both do math operations?
    correct: false
    score: 0.1
  - text: Not sure, maybe % is for percentages?
    correct: false
    score: 0
  - text: They're both arithmetic operators.
    correct: false
    score: 0.2
- question_id: JAVA-ARITH-002
  text: |
    What will be the output of this code?

    ```java
    public class ArithmeticTest {
        public static void main(String[] args) {
            int a = 17;
            int b = 5;
            System.out.println(a / b);
            System.out.println(a % b);
            System.out.println((double)a / b);
        }
    }
    ```
  question_type: code_analysis
  topic: Arithmetic and Assignment Operators
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    3
    2
    3.4
  sample_student_answers:
  - text: |
      3
      2
      3.4
    correct: true
    score: 1
  - text: |-
      3
      2
      3.4
    correct: true
    score: 1
  - text: "First line: 3, Second line: 2, Third line: 3.4"
    correct: true
    score: 0.9
  - text: |
      3
      2
      3.40
    correct: true
    score: 0.9
  - text: |
      3.4
      2
      3.4
    correct: false
    score: 0.6
  - text: |
      3
      2
      3
    correct: false
    score: 0.7
  - text: 17/5 = 3.4, 17%5 = 2, so 3.4, 2, 3.4
    correct: false
    score: 0.4
  - text: 3, 2, and some decimal number
    correct: false
    score: 0.3
  - text: Integer division gives 3, modulus gives 2, casting makes it decimal
    correct: false
    score: 0.5
  - text: Not sure about casting and modulus
    correct: false
    score: 0
- question_id: JAVA-ARITH-003
  text: Explain the difference between ++x and x++ operators in Java.
  question_type: short_answer
  topic: Arithmetic and Assignment Operators
  difficulty: 3
  cognitive_level: analysis
  reference_answer: "++x is pre-increment: it increments x first, then returns the new value. x++ is post-increment: it returns the current value of x first, then increments x. The difference matters when the increment is used in an expression or assignment."
  sample_student_answers:
  - text: ++x increments first then returns value, x++ returns value then increments.
    correct: true
    score: 1
  - text: Pre-increment happens before using the value, post-increment happens after.
    correct: true
    score: 0.9
  - text: ++x adds 1 before, x++ adds 1 after using the variable.
    correct: true
    score: 0.8
  - text: ++x is prefix increment, x++ is postfix increment. Different timing.
    correct: true
    score: 0.7
  - text: Both add 1 to x but ++x does it first.
    correct: true
    score: 0.6
  - text: They both increment x by 1.
    correct: false
    score: 0.3
  - text: ++x is faster than x++.
    correct: false
    score: 0.1
  - text: One adds before, one adds after, but I'm not sure which is which.
    correct: false
    score: 0.2
  - text: Both are increment operators, no difference.
    correct: false
    score: 0
  - text: I think ++ means add 1?
    correct: false
    score: 0.1
- question_id: JAVA-ARITH-004
  text: |
    What will be the values of a, b, and c after this code executes?

    ```java
    int a = 10;
    int b = 5;
    a += b;
    b *= 2;
    int c = a - b;
    ```
  question_type: code_analysis
  topic: Arithmetic and Assignment Operators
  difficulty: 2
  cognitive_level: application
  reference_answer: a = 15, b = 10, c = 5
  sample_student_answers:
  - text: a = 15, b = 10, c = 5
    correct: true
    score: 1
  - text: a is 15, b is 10, c is 5
    correct: true
    score: 1
  - text: a=15, b=10, c=5
    correct: true
    score: 1
  - text: "After execution: a=15, b=10, c=5"
    correct: true
    score: 1
  - text: a becomes 15, b becomes 10, c becomes 5
    correct: true
    score: 1
  - text: a = 15, b = 5, c = 10
    correct: false
    score: 0.3
  - text: a = 10, b = 10, c = 0
    correct: false
    score: 0.3
  - text: a = 15, b = 10, c = 25
    correct: false
    score: 0.6
  - text: I'm confused about += and *= operators
    correct: false
    score: 0
  - text: a gets bigger, b gets bigger, c is the difference
    correct: false
    score: 0.2
- question_id: JAVA-ARITH-005
  text: "Which assignment operators are equivalent to the following expressions? Write the shorthand version: x = x + 5, y = y * 3, z = z - 2"
  question_type: fill_blank
  topic: Arithmetic and Assignment Operators
  difficulty: 2
  cognitive_level: application
  reference_answer: x += 5, y *= 3, z -= 2
  sample_student_answers:
  - text: x += 5, y *= 3, z -= 2
    correct: true
    score: 1
  - text: x+=5, y*=3, z-=2
    correct: true
    score: 1
  - text: x += 5; y *= 3; z -= 2;
    correct: true
    score: 0.9
  - text: x += 5, y *= 3, z -= 2
    correct: true
    score: 1
  - text: +=5, *=3, -=2
    correct: false
    score: 0.6
  - text: x =+ 5, y =* 3, z =- 2
    correct: false
    score: 0.2
  - text: x + 5, y * 3, z - 2
    correct: false
    score: 0
  - text: x++5, y**3, z--2
    correct: false
    score: 0
  - text: I know there are shortcuts but can't remember the syntax
    correct: false
    score: 0.1
  - text: Something with = and the operator together?
    correct: false
    score: 0.2
- question_id: JAVA-ARITH-006
  text: >
    Complete this program to calculate and display the area and perimeter of a rectangle:


    ```java

    public class Rectangle {
        public static void main(String[] args) {
            int length = 12;
            int width = 8;
            
            // Calculate area and perimeter
            // Your code here
            
            System.out.println("Area: " + area);
            System.out.println("Perimeter: " + perimeter);
        }
    }

    ```
  question_type: coding
  topic: Arithmetic and Assignment Operators
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    int area = length * width;
    int perimeter = 2 * (length + width);
  sample_student_answers:
  - text: |
      int area = length * width;
      int perimeter = 2 * (length + width);
    correct: true
    score: 1
  - text: |
      int area = length * width;
      int perimeter = (length + width) * 2;
    correct: true
    score: 1
  - text: |
      int area = 12 * 8;
      int perimeter = 2 * (12 + 8);
    correct: true
    score: 0.8
  - text: |
      int area = length * width;
      int perimeter = length + width + length + width;
    correct: true
    score: 0.9
  - text: |
      area = length * width;
      perimeter = 2 * (length + width);
    correct: false
    score: 0.7
  - text: |
      int area = length + width;
      int perimeter = 2 * (length * width);
    correct: false
    score: 0
  - text: |
      double area = length * width;
      double perimeter = 2 * (length + width);
    correct: true
    score: 0.9
  - text: |
      int area = length * width;
      int perimeter = length * 2 + width * 2;
    correct: true
    score: 1
  - text: I know area is length times width but not sure about perimeter formula
    correct: false
    score: 0.2
  - text: Need to multiply and add but forgot the formulas
    correct: false
    score: 0.1
- question_id: JAVA-REL-001
  text: What is the difference between == and .equals() when comparing strings in Java?
  question_type: short_answer
  topic: Relational and Logical Operators
  difficulty: 3
  cognitive_level: comprehension
  reference_answer: == compares object references (memory addresses) while .equals() compares the actual content/values of strings. For strings, you should use .equals() to compare content, not ==.
  sample_student_answers:
  - text: == compares references, .equals() compares content of strings.
    correct: true
    score: 1
  - text: == checks if they're the same object, .equals() checks if they have same value.
    correct: true
    score: 0.9
  - text: .equals() compares the actual text, == compares memory locations.
    correct: true
    score: 0.9
  - text: Use .equals() for string content comparison, == for object comparison.
    correct: true
    score: 0.8
  - text: Both compare strings but .equals() is better.
    correct: false
    score: 0.3
  - text: == is for numbers, .equals() is for strings.
    correct: false
    score: 0.4
  - text: They do the same thing but .equals() is safer.
    correct: false
    score: 0.2
  - text: I think == is faster than .equals()?
    correct: false
    score: 0.1
  - text: Not sure, I always use == for everything.
    correct: false
    score: 0
  - text: .equals() is a method, == is an operator.
    correct: false
    score: 0.2
- question_id: JAVA-REL-002
  text: |
    What will be the output of this code?

    ```java
    public class LogicalTest {
        public static void main(String[] args) {
            boolean a = true;
            boolean b = false;
            System.out.println(a && b);
            System.out.println(a || b);
            System.out.println(!a);
            System.out.println(!(a && b));
        }
    }
    ```
  question_type: code_analysis
  topic: Relational and Logical Operators
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    false
    true
    false
    true
  sample_student_answers:
  - text: |
      false
      true
      false
      true
    correct: true
    score: 1
  - text: |-
      false
      true
      false
      true
    correct: true
    score: 1
  - text: "Line 1: false, Line 2: true, Line 3: false, Line 4: true"
    correct: true
    score: 0.9
  - text: |
      false
      true
      false
      true
    correct: true
    score: 1
  - text: |
      true
      true
      false
      false
    correct: false
    score: 0.5
  - text: |
      false
      false
      true
      true
    correct: false
    score: 0.5
  - text: AND gives false, OR gives true, NOT flips values
    correct: false
    score: 0.3
  - text: I'm confused about the logical operators
    correct: false
    score: 0
  - text: Something with true and false but not sure which
    correct: false
    score: 0.1
  - text: All boolean results but can't trace through
    correct: false
    score: 0.2
- question_id: JAVA-REL-003
  text: Explain the difference between && and || operators in Java.
  question_type: short_answer
  topic: Relational and Logical Operators
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: "&& is the logical AND operator - returns true only if both operands are true. || is the logical OR operator - returns true if at least one operand is true. Both use short-circuit evaluation."
  sample_student_answers:
  - text: "&& means AND (both must be true), || means OR (at least one must be true)."
    correct: true
    score: 1
  - text: "&& requires both conditions true, || needs only one condition true."
    correct: true
    score: 1
  - text: AND operator vs OR operator. && for both, || for either.
    correct: true
    score: 0.9
  - text: "&& is logical AND, || is logical OR."
    correct: true
    score: 0.7
  - text: "&& combines conditions, || gives alternatives."
    correct: true
    score: 0.6
  - text: Both are logical operators but different rules.
    correct: false
    score: 0.3
  - text: "&& is multiplication, || is addition for booleans."
    correct: false
    score: 0.1
  - text: I think && is stricter than ||?
    correct: false
    score: 0.2
  - text: They're both for comparing things.
    correct: false
    score: 0.1
  - text: Not sure about the symbols.
    correct: false
    score: 0
- question_id: JAVA-REL-004
  text: |
    What will be the result of this comparison?

    ```java
    int x = 15;
    int y = 20;
    boolean result = (x > 10) && (y < 25) && (x + y > 30);
    System.out.println(result);
    ```
  question_type: code_analysis
  topic: Relational and Logical Operators
  difficulty: 3
  cognitive_level: analysis
  reference_answer: "true"
  sample_student_answers:
  - text: "true"
    correct: true
    score: 1
  - text: The result is true
    correct: true
    score: 1
  - text: true because all three conditions are met
    correct: true
    score: 1
  - text: true (15>10 is true, 20<25 is true, 15+20>30 is true)
    correct: true
    score: 1
  - text: All conditions are true so result is true
    correct: true
    score: 0.9
  - text: "false"
    correct: false
    score: 0
  - text: true because x and y meet the conditions
    correct: true
    score: 0.8
  - text: 15 > 10 = true, 20 < 25 = true, 35 > 30 = true, so true
    correct: true
    score: 1
  - text: I think it's true but not sure about the math
    correct: false
    score: 0.3
  - text: Need to check each condition but confused about &&
    correct: false
    score: 0.2
- question_id: JAVA-REL-005
  text: What does short-circuit evaluation mean in Java logical operators?
  question_type: short_answer
  topic: Relational and Logical Operators
  difficulty: 4
  cognitive_level: comprehension
  reference_answer: Short-circuit evaluation means that Java stops evaluating logical expressions as soon as the result is determined. For &&, if the first operand is false, the second isn't evaluated. For ||, if the first operand is true, the second isn't evaluated.
  sample_student_answers:
  - text: Java stops evaluating when the result is already determined. && stops at false, || stops at true.
    correct: true
    score: 1
  - text: If first condition in && is false, second isn't checked. If first in || is true, second isn't checked.
    correct: true
    score: 1
  - text: Java doesn't evaluate all parts if it already knows the answer.
    correct: true
    score: 0.8
  - text: Optimization where Java skips unnecessary evaluations in logical expressions.
    correct: true
    score: 0.9
  - text: Early termination of logical operations when result is obvious.
    correct: true
    score: 0.8
  - text: Java tries to be efficient with logical operations.
    correct: false
    score: 0.3
  - text: It's when Java takes shortcuts in code.
    correct: false
    score: 0.2
  - text: Something about faster processing?
    correct: false
    score: 0.1
  - text: I think it means Java is smart about checking conditions.
    correct: false
    score: 0.2
  - text: Not sure what short-circuit means.
    correct: false
    score: 0
- question_id: JAVA-REL-006
  text: >
    Write a boolean expression that checks if a student's grade is between 70 and 100 (inclusive) AND their attendance is above 80%:


    ```java

    public class GradeChecker {
        public static void main(String[] args) {
            int grade = 85;
            double attendance = 90.5;
            
            // Write your boolean expression here
            boolean isPassingStudent = // Your code here
            
            System.out.println("Passing student: " + isPassingStudent);
        }
    }

    ```
  question_type: coding
  topic: Relational and Logical Operators
  difficulty: 2
  cognitive_level: application
  reference_answer: (grade >= 70 && grade <= 100) && (attendance > 80)
  sample_student_answers:
  - text: (grade >= 70 && grade <= 100) && (attendance > 80)
    correct: true
    score: 1
  - text: grade >= 70 && grade <= 100 && attendance > 80
    correct: true
    score: 1
  - text: (grade >= 70) && (grade <= 100) && (attendance > 80.0)
    correct: true
    score: 1
  - text: grade >= 70 && grade <= 100 && attendance > 80.0
    correct: true
    score: 1
  - text: (grade > 69 && grade < 101) && attendance > 80
    correct: true
    score: 0.9
  - text: grade >= 70 && grade <= 100 || attendance > 80
    correct: false
    score: 0.4
  - text: grade > 70 && grade < 100 && attendance > 80
    correct: false
    score: 0.7
  - text: (grade between 70 and 100) && (attendance > 80)
    correct: false
    score: 0.2
  - text: grade >= 70 and grade <= 100 and attendance > 80
    correct: false
    score: 0.3
  - text: I know it needs && but not sure about the exact syntax
    correct: false
    score: 0.1
- question_id: JAVA-COND-001
  text: What is the purpose of the else clause in an if-else statement?
  question_type: short_answer
  topic: Conditional Statements
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: The else clause provides an alternative block of code that executes when the if condition is false. It ensures that one of two code paths will always be executed.
  sample_student_answers:
  - text: The else clause runs when the if condition is false.
    correct: true
    score: 1
  - text: It provides an alternative action when the condition isn't met.
    correct: true
    score: 0.9
  - text: Else executes when if doesn't.
    correct: true
    score: 0.8
  - text: It's the backup plan when if condition fails.
    correct: true
    score: 0.7
  - text: Else is for when the condition is not true.
    correct: true
    score: 0.8
  - text: It's another condition to check.
    correct: false
    score: 0.2
  - text: Else is like a second if statement.
    correct: false
    score: 0.3
  - text: It's for error handling.
    correct: false
    score: 0.1
  - text: I think it's optional?
    correct: false
    score: 0.2
  - text: Not sure what else does.
    correct: false
    score: 0
- question_id: JAVA-COND-002
  text: |
    What will be the output of this code?

    ```java
    public class ConditionalTest {
        public static void main(String[] args) {
            int score = 75;
            if (score >= 90) {
                System.out.println("A grade");
            } else if (score >= 80) {
                System.out.println("B grade");
            } else if (score >= 70) {
                System.out.println("C grade");
            } else {
                System.out.println("Below C");
            }
        }
    }
    ```
  question_type: code_analysis
  topic: Conditional Statements
  difficulty: 2
  cognitive_level: application
  reference_answer: C grade
  sample_student_answers:
  - text: C grade
    correct: true
    score: 1
  - text: The output is C grade
    correct: true
    score: 1
  - text: It prints C grade
    correct: true
    score: 1
  - text: C grade because 75 >= 70
    correct: true
    score: 1
  - text: 75 falls in the C grade range so C grade
    correct: true
    score: 1
  - text: B grade
    correct: false
    score: 0
  - text: Below C
    correct: false
    score: 0
  - text: It checks all conditions and prints C grade
    correct: true
    score: 0.9
  - text: 75 is not >= 90 or >= 80, but is >= 70, so C grade
    correct: true
    score: 1
  - text: I think it's C but not sure about if-else logic
    correct: false
    score: 0.3
- question_id: JAVA-COND-003
  text: When should you use a switch statement instead of multiple if-else statements?
  question_type: short_answer
  topic: Conditional Statements
  difficulty: 3
  cognitive_level: analysis
  reference_answer: Use switch when comparing a single variable against multiple discrete values (like integers, chars, strings, or enums). Switch is more readable and potentially more efficient than multiple if-else when you have many exact value comparisons.
  sample_student_answers:
  - text: When you're comparing one variable against many specific values, switch is cleaner.
    correct: true
    score: 1
  - text: Switch is better for multiple exact value comparisons of the same variable.
    correct: true
    score: 0.9
  - text: Use switch for discrete values like numbers or strings, if-else for ranges.
    correct: true
    score: 0.9
  - text: Switch is more readable when checking many possible values of one variable.
    correct: true
    score: 0.8
  - text: When you have lots of == comparisons for the same variable.
    correct: true
    score: 0.8
  - text: Switch is faster than if-else.
    correct: false
    score: 0.3
  - text: Always use switch instead of if-else.
    correct: false
    score: 0
  - text: Switch is for numbers, if-else is for booleans.
    correct: false
    score: 0.2
  - text: I think switch is newer so it's better?
    correct: false
    score: 0.1
  - text: Not sure when to use which one.
    correct: false
    score: 0
- question_id: JAVA-COND-004
  text: |
    What will happen if you forget the 'break' statement in a switch case?

    ```java
    int day = 2;
    switch (day) {
        case 1:
            System.out.println("Monday");
        case 2:
            System.out.println("Tuesday");
        case 3:
            System.out.println("Wednesday");
        default:
            System.out.println("Other day");
    }
    ```
  question_type: code_analysis
  topic: Conditional Statements
  difficulty: 3
  cognitive_level: analysis
  reference_answer: |
    Tuesday
    Wednesday
    Other day
  sample_student_answers:
  - text: |
      Tuesday
      Wednesday
      Other day
    correct: true
    score: 1
  - text: |-
      Tuesday
      Wednesday
      Other day
    correct: true
    score: 1
  - text: It will print Tuesday, Wednesday, and Other day due to fall-through
    correct: true
    score: 1
  - text: All cases after case 2 will execute because no break statements
    correct: true
    score: 0.9
  - text: "Fall-through behavior: Tuesday, Wednesday, Other day"
    correct: true
    score: 1
  - text: Just Tuesday
    correct: false
    score: 0
  - text: Tuesday and Wednesday
    correct: false
    score: 0.6
  - text: It will cause an error
    correct: false
    score: 0
  - text: Something about fall-through but not sure what prints
    correct: false
    score: 0.2
  - text: Break prevents something but I forgot what
    correct: false
    score: 0.1
- question_id: JAVA-COND-005
  text: What is the difference between nested if statements and if-else if chains?
  question_type: short_answer
  topic: Conditional Statements
  difficulty: 3
  cognitive_level: analysis
  reference_answer: Nested if statements are independent conditions inside other if blocks - multiple conditions can be true and executed. If-else if chains are mutually exclusive - only one block executes, and once a condition is true, the rest are skipped.
  sample_student_answers:
  - text: Nested ifs can execute multiple blocks, if-else if only executes one block.
    correct: true
    score: 1
  - text: If-else if is mutually exclusive, nested ifs are independent conditions.
    correct: true
    score: 1
  - text: Nested ifs are ifs inside ifs, if-else if is a chain of alternatives.
    correct: true
    score: 0.9
  - text: If-else if stops after first true condition, nested ifs check all conditions.
    correct: true
    score: 0.9
  - text: Different structure and execution behavior.
    correct: false
    score: 0.3
  - text: Nested is more complex than if-else if.
    correct: false
    score: 0.2
  - text: They're basically the same thing.
    correct: false
    score: 0
  - text: Nested ifs are inside other ifs, if-else if uses else.
    correct: false
    score: 0.4
  - text: I think nested is harder to read?
    correct: false
    score: 0.1
  - text: Not sure about the difference.
    correct: false
    score: 0
- question_id: JAVA-COND-006
  text: |
    Complete this program to determine shipping cost based on weight:
    - 0-5 lbs: $5
    - 6-20 lbs: $10  
    - 21-50 lbs: $20
    - Over 50 lbs: $30

    ```java
    public class ShippingCalculator {
        public static void main(String[] args) {
            double weight = 15.5;
            double shippingCost;
            
            // Your conditional logic here
            
            System.out.println("Shipping cost: $" + shippingCost);
        }
    }
    ```
  question_type: coding
  topic: Conditional Statements
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    if (weight <= 5) {
        shippingCost = 5;
    } else if (weight <= 20) {
        shippingCost = 10;
    } else if (weight <= 50) {
        shippingCost = 20;
    } else {
        shippingCost = 30;
    }
  sample_student_answers:
  - text: |
      if (weight <= 5) {
          shippingCost = 5;
      } else if (weight <= 20) {
          shippingCost = 10;
      } else if (weight <= 50) {
          shippingCost = 20;
      } else {
          shippingCost = 30;
      }
    correct: true
    score: 1
  - text: |
      if (weight >= 0 && weight <= 5) {
          shippingCost = 5;
      } else if (weight >= 6 && weight <= 20) {
          shippingCost = 10;
      } else if (weight >= 21 && weight <= 50) {
          shippingCost = 20;
      } else {
          shippingCost = 30;
      }
    correct: true
    score: 0.9
  - text: |
      if (weight <= 5)
          shippingCost = 5;
      else if (weight <= 20)
          shippingCost = 10;
      else if (weight <= 50)
          shippingCost = 20;
      else
          shippingCost = 30;
    correct: true
    score: 0.9
  - text: |
      if (weight < 6) {
          shippingCost = 5;
      } else if (weight < 21) {
          shippingCost = 10;
      } else if (weight < 51) {
          shippingCost = 20;
      } else {
          shippingCost = 30;
      }
    correct: true
    score: 1
  - text: |
      if (weight <= 5) {
          shippingCost = 5;
      }
      if (weight <= 20) {
          shippingCost = 10;
      }
      if (weight <= 50) {
          shippingCost = 20;
      }
      if (weight > 50) {
          shippingCost = 30;
      }
    correct: false
    score: 0.3
  - text: |
      switch (weight) {
          case 0-5: shippingCost = 5; break;
          case 6-20: shippingCost = 10; break;
          case 21-50: shippingCost = 20; break;
          default: shippingCost = 30;
      }
    correct: false
    score: 0
  - text: |
      if (weight <= 5) shippingCost = 5;
      else if (weight <= 20) shippingCost = 10;
      else shippingCost = 20;
    correct: false
    score: 0.7
  - text: I know I need if-else but not sure about the exact conditions
    correct: false
    score: 0.2
  - text: Need to check weight ranges but confused about <= vs <
    correct: false
    score: 0.1
  - text: Something with if statements for different weights
    correct: false
    score: 0.1
- question_id: JAVA-WHILE-001
  text: What is the main difference between a while loop and a do-while loop?
  question_type: short_answer
  topic: while and do-while loops
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: A while loop checks the condition first and may never execute if the condition is initially false. A do-while loop executes the body at least once, then checks the condition, guaranteeing at least one execution.
  sample_student_answers:
  - text: While checks condition first, do-while executes once then checks condition.
    correct: true
    score: 1
  - text: Do-while always runs at least once, while might not run at all.
    correct: true
    score: 1
  - text: While is pre-test loop, do-while is post-test loop.
    correct: true
    score: 0.9
  - text: Do-while guarantees one execution, while doesn't.
    correct: true
    score: 0.9
  - text: While loop checks before running, do-while checks after running.
    correct: true
    score: 0.8
  - text: They're basically the same except syntax.
    correct: false
    score: 0.2
  - text: Do-while is newer version of while.
    correct: false
    score: 0
  - text: While is for counting, do-while is for input.
    correct: false
    score: 0.1
  - text: I think do-while is more efficient?
    correct: false
    score: 0.1
  - text: Not sure about the difference.
    correct: false
    score: 0
- question_id: JAVA-WHILE-002
  text: |
    What will be the output of this while loop?

    ```java
    public class WhileTest {
        public static void main(String[] args) {
            int i = 5;
            while (i > 2) {
                System.out.print(i + " ");
                i--;
            }
            System.out.println("Done");
        }
    }
    ```
  question_type: code_analysis
  topic: while and do-while loops
  difficulty: 2
  cognitive_level: application
  reference_answer: 5 4 3 Done
  sample_student_answers:
  - text: 5 4 3 Done
    correct: true
    score: 1
  - text: 5 4 3 Done
    correct: true
    score: 1
  - text: It prints 5 4 3 Done
    correct: true
    score: 1
  - text: 5, 4, 3, then Done
    correct: true
    score: 0.9
  - text: Numbers 5 down to 3, then Done
    correct: true
    score: 0.8
  - text: 5 4 3 2 Done
    correct: false
    score: 0.7
  - text: 5 4 3 2 1 Done
    correct: false
    score: 0.5
  - text: It counts down from 5 and prints Done
    correct: false
    score: 0.4
  - text: Infinite loop
    correct: false
    score: 0
  - text: I think it prints numbers but not sure which ones
    correct: false
    score: 0.2
- question_id: JAVA-WHILE-003
  text: |
    How many times will this do-while loop execute?

    ```java
    int x = 10;
    do {
        System.out.println(x);
        x++;
    } while (x < 10);
    ```
  question_type: short_answer
  topic: while and do-while loops
  difficulty: 3
  cognitive_level: analysis
  reference_answer: The loop will execute exactly once. Even though the condition (x < 10) is false initially, do-while executes the body first, prints 10, increments x to 11, then checks the condition and exits.
  sample_student_answers:
  - text: Once. Do-while always executes at least once, then checks condition.
    correct: true
    score: 1
  - text: 1 time because it runs first then checks x < 10 which is false.
    correct: true
    score: 1
  - text: Exactly one time since x starts at 10 and condition is x < 10.
    correct: true
    score: 1
  - text: One execution because do-while runs before checking condition.
    correct: true
    score: 0.9
  - text: It runs once, prints 10, then stops because 11 < 10 is false.
    correct: true
    score: 1
  - text: Zero times because x is not less than 10.
    correct: false
    score: 0
  - text: Infinite times because x keeps increasing.
    correct: false
    score: 0
  - text: It depends on the value of x.
    correct: false
    score: 0.1
  - text: I think once but not sure about do-while behavior.
    correct: false
    score: 0.3
  - text: Do-while is confusing, not sure.
    correct: false
    score: 0
- question_id: JAVA-WHILE-004
  text: |
    Complete the following while loop to print numbers from 1 to 5:

    ```java
    int i = 1;
    while (______) {
        System.out.println(i);
        ______;
    }
    ```
  question_type: fill_blank
  topic: while and do-while loops
  difficulty: 2
  cognitive_level: application
  reference_answer: i <= 5 (or i < 6) for the condition, and i++ (or i = i + 1) for the increment
  sample_student_answers:
  - text: i <= 5 and i++
    correct: true
    score: 1
  - text: i < 6 and i++
    correct: true
    score: 1
  - text: i <= 5 and i = i + 1
    correct: true
    score: 1
  - text: i < 5 and i++
    correct: false
    score: 0.3
  - text: i != 5 and i++
    correct: false
    score: 0.2
  - text: i <= 5 and i--
    correct: false
    score: 0.1
  - text: true and i++
    correct: false
    score: 0
  - text: i > 0 and i++
    correct: false
    score: 0
  - text: Not sure about the condition
    correct: false
    score: 0
  - text: i and increment
    correct: false
    score: 0.1
- question_id: JAVA-WHILE-005
  text: >
    Write a do-while loop that asks the user to enter a positive number and keeps asking until they enter a positive number. Use Scanner input.
  question_type: coding
  topic: while and do-while loops
  difficulty: 4
  cognitive_level: application
  reference_answer: |
    Scanner scanner = new Scanner(System.in);
    int number;
    do {
        System.out.print("Enter a positive number: ");
        number = scanner.nextInt();
    } while (number <= 0);
  sample_student_answers:
  - text: |
      Scanner scanner = new Scanner(System.in);
      int number;
      do {
          System.out.print("Enter a positive number: ");
          number = scanner.nextInt();
      } while (number <= 0);
    correct: true
    score: 1
  - text: |
      Scanner sc = new Scanner(System.in);
      int num;
      do {
          System.out.println("Enter positive number:");
          num = sc.nextInt();
      } while (num < 1);
    correct: true
    score: 0.9
  - text: |
      Scanner input = new Scanner(System.in);
      int n;
      do {
          n = input.nextInt();
      } while (n <= 0);
    correct: true
    score: 0.7
  - text: |
      do {
          System.out.print("Enter positive number: ");
          int number = scanner.nextInt();
      } while (number <= 0);
    correct: false
    score: 0.3
  - text: |
      Scanner scanner = new Scanner(System.in);
      int number;
      while (number <= 0) {
          number = scanner.nextInt();
      }
    correct: false
    score: 0.2
  - text: |
      do {
          int number = scanner.nextInt();
      } while (number > 0);
    correct: false
    score: 0.1
  - text: I would use a while loop instead
    correct: false
    score: 0
  - text: Not sure how to combine Scanner with do-while
    correct: false
    score: 0
  - text: Do-while is confusing
    correct: false
    score: 0
  - text: ""
    correct: false
    score: 0
- question_id: JAVA-WHILE-006
  text: What is the key difference between a while loop and a do-while loop in terms of execution?
  question_type: short_answer
  topic: while and do-while loops
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: A while loop checks the condition before executing the body (may not execute at all), while a do-while loop executes the body first and then checks the condition (executes at least once).
  sample_student_answers:
  - text: While checks condition first, do-while executes body first then checks condition.
    correct: true
    score: 1
  - text: Do-while always runs at least once, while might not run at all.
    correct: true
    score: 1
  - text: While loop tests condition before execution, do-while tests after.
    correct: true
    score: 1
  - text: Do-while executes the code first, while checks first.
    correct: true
    score: 0.9
  - text: While is pre-test, do-while is post-test loop.
    correct: true
    score: 0.8
  - text: Do-while is like while but backwards.
    correct: false
    score: 0.2
  - text: While is faster than do-while.
    correct: false
    score: 0
  - text: Do-while uses different syntax.
    correct: false
    score: 0.1
  - text: Not sure, they seem the same to me.
    correct: false
    score: 0
  - text: I think while is better.
    correct: false
    score: 0
- question_id: JAVA-FOR-001
  text: |
    What will be the output of this for loop?

    ```java
    for (int i = 0; i < 5; i++) {
        System.out.print(i + " ");
    }
    ```
  question_type: code_analysis
  topic: for and nested loops
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: "0 1 2 3 4 "
  sample_student_answers:
  - text: "0 1 2 3 4 "
    correct: true
    score: 1
  - text: 0 1 2 3 4
    correct: true
    score: 0.9
  - text: 0, 1, 2, 3, 4
    correct: true
    score: 0.8
  - text: Numbers from 0 to 4
    correct: true
    score: 0.7
  - text: 1 2 3 4 5
    correct: false
    score: 0
  - text: 0 1 2 3 4 5
    correct: false
    score: 0.2
  - text: It prints i five times
    correct: false
    score: 0.1
  - text: 5 numbers
    correct: false
    score: 0.1
  - text: Not sure about for loop syntax
    correct: false
    score: 0
  - text: i++ means it adds 1
    correct: false
    score: 0.1
- question_id: JAVA-FOR-002
  text: |
    Write a for loop that prints all even numbers from 2 to 20.
  question_type: coding
  topic: for and nested loops
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    for (int i = 2; i <= 20; i += 2) {
        System.out.println(i);
    }
    // Alternative:
    for (int i = 1; i <= 10; i++) {
        System.out.println(i * 2);
    }
  sample_student_answers:
  - text: |
      for (int i = 2; i <= 20; i += 2) {
          System.out.println(i);
      }
    correct: true
    score: 1
  - text: |
      for (int i = 2; i <= 20; i = i + 2) {
          System.out.println(i);
      }
    correct: true
    score: 1
  - text: |
      for (int i = 0; i <= 20; i++) {
          if (i % 2 == 0 && i != 0) {
              System.out.println(i);
          }
      }
    correct: true
    score: 0.8
  - text: |
      for (int i = 1; i <= 10; i++) {
          System.out.println(i * 2);
      }
    correct: true
    score: 0.9
  - text: |
      for (int i = 2; i < 20; i += 2) {
          System.out.println(i);
      }
    correct: false
    score: 0.4
  - text: |
      for (int i = 2; i <= 20; i++) {
          System.out.println(i);
      }
    correct: false
    score: 0.2
  - text: |
      for (int i = 0; i <= 20; i += 2) {
          System.out.println(i);
      }
    correct: false
    score: 0.6
  - text: for (i = 2; i <= 20; i += 2) System.out.println(i);
    correct: false
    score: 0.3
  - text: Not sure how to make it only even numbers
    correct: false
    score: 0
  - text: I would use i % 2 somehow
    correct: false
    score: 0.1
- question_id: JAVA-FOR-003
  text: |
    What will this nested for loop print?

    ```java
    for (int i = 1; i <= 3; i++) {
        for (int j = 1; j <= 2; j++) {
            System.out.print(i + "" + j + " ");
        }
        System.out.println();
    }
    ```
  question_type: code_analysis
  topic: for and nested loops
  difficulty: 3
  cognitive_level: analysis
  reference_answer: |
    11 12 
    21 22 
    31 32 
  sample_student_answers:
  - text: |
      11 12 
      21 22 
      31 32 
    correct: true
    score: 1
  - text: |-
      11 12
      21 22
      31 32
    correct: true
    score: 1
  - text: |
      11 12
      21 22
      31 32
    correct: true
    score: 0.9
  - text: It prints i and j combined for each iteration
    correct: true
    score: 0.7
  - text: 11 12 21 22 31 32
    correct: false
    score: 0.3
  - text: |
      1 1 1 2
      2 1 2 2
      3 1 3 2
    correct: false
    score: 0.1
  - text: Numbers from 11 to 32
    correct: false
    score: 0.2
  - text: It makes a pattern with i and j
    correct: false
    score: 0.2
  - text: Nested loops are confusing
    correct: false
    score: 0
  - text: Six numbers total
    correct: false
    score: 0.1
- question_id: JAVA-FOR-004
  text: What are the three parts of a for loop header and what does each part do?
  question_type: short_answer
  topic: for and nested loops
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: "The three parts are: 1) Initialization (executed once at the start), 2) Condition (checked before each iteration), and 3) Update/Increment (executed after each iteration)."
  sample_student_answers:
  - text: Initialization, condition, and increment. Init runs once, condition checks before each loop, increment runs after each iteration.
    correct: true
    score: 1
  - text: Start value, test condition, and update. They control the loop execution.
    correct: true
    score: 0.9
  - text: First part sets initial value, second checks if continue, third updates the variable.
    correct: true
    score: 0.9
  - text: Initialize variable, check condition, increment variable.
    correct: true
    score: 0.8
  - text: Declaration, boolean test, and modification of loop variable.
    correct: true
    score: 0.8
  - text: Start, middle, end parts of the for loop.
    correct: false
    score: 0.1
  - text: The parts separated by semicolons.
    correct: false
    score: 0.2
  - text: Variable, comparison, and increment.
    correct: false
    score: 0.4
  - text: Not sure what you mean by three parts.
    correct: false
    score: 0
  - text: I think it's like while loop but different.
    correct: false
    score: 0
- question_id: JAVA-FOR-005
  text: |
    Write nested for loops to create this pattern:
    ```
    *
    **
    ***
    ****
    ```
  question_type: coding
  topic: for and nested loops
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    for (int i = 1; i <= 4; i++) {
        for (int j = 1; j <= i; j++) {
            System.out.print("*");
        }
        System.out.println();
    }
  sample_student_answers:
  - text: |
      for (int i = 1; i <= 4; i++) {
          for (int j = 1; j <= i; j++) {
              System.out.print("*");
          }
          System.out.println();
      }
    correct: true
    score: 1
  - text: |
      for (int i = 0; i < 4; i++) {
          for (int j = 0; j <= i; j++) {
              System.out.print("*");
          }
          System.out.println();
      }
    correct: true
    score: 1
  - text: |
      for (int row = 1; row <= 4; row++) {
          for (int col = 1; col <= row; col++) {
              System.out.print("*");
          }
          System.out.println();
      }
    correct: true
    score: 1
  - text: |
      for (int i = 1; i <= 4; i++) {
          for (int j = 1; j <= i; j++) {
              System.out.print("*");
          }
          System.out.print("\n");
      }
    correct: true
    score: 0.9
  - text: |
      for (int i = 1; i <= 4; i++) {
          for (int j = 1; j <= 4; j++) {
              if (j <= i) System.out.print("*");
          }
          System.out.println();
      }
    correct: true
    score: 0.7
  - text: |
      for (int i = 1; i <= 4; i++) {
          for (int j = 1; j <= i; j++) {
              System.out.println("*");
          }
      }
    correct: false
    score: 0.3
  - text: |
      for (int i = 0; i < 4; i++) {
          System.out.println("*");
      }
    correct: false
    score: 0.1
  - text: I need to use nested loops but not sure how
    correct: false
    score: 0
  - text: Inner loop depends on outer loop variable
    correct: false
    score: 0.2
  - text: Patterns are hard with loops
    correct: false
    score: 0
- question_id: JAVA-FOR-006
  text: |
    What is wrong with this for loop?

    ```java
    for (int i = 0; i < 10; i--) {
        System.out.println(i);
    }
    ```
  question_type: short_answer
  topic: for and nested loops
  difficulty: 2
  cognitive_level: analysis
  reference_answer: The loop decrements i (i--) while the condition checks if i < 10. Since i starts at 0 and keeps decreasing, it will always be less than 10, creating an infinite loop.
  sample_student_answers:
  - text: It creates an infinite loop because i starts at 0, decreases with i--, but condition is i < 10 which is always true.
    correct: true
    score: 1
  - text: The increment should be i++ not i-- to avoid infinite loop.
    correct: true
    score: 0.9
  - text: i-- makes it go backwards but condition expects it to go forward, so infinite loop.
    correct: true
    score: 0.9
  - text: It will run forever because i keeps getting smaller and smaller.
    correct: true
    score: 0.8
  - text: The condition and increment don't match - creates infinite loop.
    correct: true
    score: 0.8
  - text: It should be i++ instead of i--.
    correct: false
    score: 0.4
  - text: The condition is wrong.
    correct: false
    score: 0.2
  - text: It will print negative numbers.
    correct: false
    score: 0.1
  - text: Not sure but something seems off.
    correct: false
    score: 0.1
  - text: Looks fine to me.
    correct: false
    score: 0
- question_id: JAVA-METHOD-001
  text: |
    What will be the output of this code?

    ```java
    public class Test {
        public static void greet() {
            System.out.println("Hello World!");
        }
        
        public static void main(String[] args) {
            greet();
            greet();
        }
    }
    ```
  question_type: code_analysis
  topic: Method Definitions and Calls
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: |
    Hello World!
    Hello World!
  sample_student_answers:
  - text: |
      Hello World!
      Hello World!
    correct: true
    score: 1
  - text: |-
      Hello World!
      Hello World!
    correct: true
    score: 1
  - text: It prints Hello World! twice
    correct: true
    score: 0.9
  - text: Hello World! appears two times
    correct: true
    score: 0.8
  - text: Calls greet method twice so prints the message twice
    correct: true
    score: 0.9
  - text: Hello World!
    correct: false
    score: 0.4
  - text: greet() greet()
    correct: false
    score: 0
  - text: It calls the greet function
    correct: false
    score: 0.2
  - text: Methods print things
    correct: false
    score: 0.1
  - text: Not sure how method calls work
    correct: false
    score: 0
- question_id: JAVA-METHOD-002
  text: >
    Write a method called `calculateArea` that takes two integers (length and width) and returns their product.
  question_type: coding
  topic: Method Definitions and Calls
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    public static int calculateArea(int length, int width) {
        return length * width;
    }
  sample_student_answers:
  - text: |
      public static int calculateArea(int length, int width) {
          return length * width;
      }
    correct: true
    score: 1
  - text: |
      public static int calculateArea(int length, int width) {
          int area = length * width;
          return area;
      }
    correct: true
    score: 1
  - text: |
      static int calculateArea(int length, int width) {
          return length * width;
      }
    correct: true
    score: 0.9
  - text: |
      public int calculateArea(int length, int width) {
          return length * width;
      }
    correct: true
    score: 0.8
  - text: |
      public static void calculateArea(int length, int width) {
          return length * width;
      }
    correct: false
    score: 0.3
  - text: |
      public static int calculateArea(length, width) {
          return length * width;
      }
    correct: false
    score: 0.5
  - text: |
      int calculateArea(int length, int width) {
          System.out.println(length * width);
      }
    correct: false
    score: 0.2
  - text: calculateArea(int length, int width) { return length * width; }
    correct: false
    score: 0.4
  - text: Not sure about method syntax
    correct: false
    score: 0
  - text: I think it needs public and static
    correct: false
    score: 0.1
- question_id: JAVA-METHOD-003
  text: What is the difference between a method that returns void and a method that returns a value?
  question_type: short_answer
  topic: Method Definitions and Calls
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: A void method performs an action but doesn't return any value to the caller. A method that returns a value computes and sends back a result that can be used by the calling code.
  sample_student_answers:
  - text: Void methods don't return anything, other methods return a value that can be used.
    correct: true
    score: 1
  - text: Void means no return value, other methods return data back to caller.
    correct: true
    score: 1
  - text: Methods with return type send back a result, void methods just do something.
    correct: true
    score: 0.9
  - text: Void methods perform actions, return methods give back values.
    correct: true
    score: 0.9
  - text: Void doesn't return, others return something like int, String, etc.
    correct: true
    score: 0.8
  - text: Void methods are faster.
    correct: false
    score: 0
  - text: Return methods are better than void.
    correct: false
    score: 0
  - text: Void methods can't have parameters.
    correct: false
    score: 0
  - text: I think void means empty.
    correct: false
    score: 0.1
  - text: Not sure about the difference.
    correct: false
    score: 0
- question_id: JAVA-METHOD-004
  text: |
    What is wrong with this method call?

    ```java
    public static int add(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        add(5, 10, 15);
    }
    ```
  question_type: short_answer
  topic: Method Definitions and Calls
  difficulty: 2
  cognitive_level: analysis
  reference_answer: The method `add` is defined to take 2 parameters (int a, int b), but it's being called with 3 arguments (5, 10, 15). This will cause a compilation error due to incorrect number of arguments.
  sample_student_answers:
  - text: The method takes 2 parameters but is called with 3 arguments.
    correct: true
    score: 1
  - text: add() expects 2 ints but getting 3 values - won't compile.
    correct: true
    score: 1
  - text: Too many arguments in the method call. Should be add(5, 10).
    correct: true
    score: 1
  - text: Method signature has 2 parameters, call has 3 arguments.
    correct: true
    score: 1
  - text: Wrong number of arguments passed to the method.
    correct: true
    score: 0.9
  - text: The method call is incorrect.
    correct: false
    score: 0.2
  - text: It should return the result.
    correct: false
    score: 0.1
  - text: The method needs to be called differently.
    correct: false
    score: 0.1
  - text: Something about parameters is wrong.
    correct: false
    score: 0.2
  - text: Not sure what's wrong.
    correct: false
    score: 0
- question_id: JAVA-METHOD-005
  text: |
    Complete this method to find the maximum of three numbers:

    ```java
    public static int findMax(int a, int b, int c) {
        // Your code here
    }
    ```
  question_type: coding
  topic: Method Definitions and Calls
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    public static int findMax(int a, int b, int c) {
        if (a >= b && a >= c) {
            return a;
        } else if (b >= c) {
            return b;
        } else {
            return c;
        }
    }
    // Alternative: return Math.max(Math.max(a, b), c);
  sample_student_answers:
  - text: |
      if (a >= b && a >= c) {
          return a;
      } else if (b >= c) {
          return b;
      } else {
          return c;
      }
    correct: true
    score: 1
  - text: return Math.max(Math.max(a, b), c);
    correct: true
    score: 1
  - text: |
      int max = a;
      if (b > max) max = b;
      if (c > max) max = c;
      return max;
    correct: true
    score: 1
  - text: |
      if (a > b && a > c) return a;
      if (b > c) return b;
      return c;
    correct: true
    score: 0.9
  - text: |
      return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);
    correct: true
    score: 0.8
  - text: |
      if (a > b && a > c) {
          return a;
      } else if (b > c) {
          return b;
      }
      return c;
    correct: false
    score: 0.7
  - text: |
      if (a > b > c) return a;
      if (b > c) return b;
      return c;
    correct: false
    score: 0.2
  - text: return a + b + c;
    correct: false
    score: 0
  - text: I would compare them somehow
    correct: false
    score: 0.1
  - text: Use if statements to check which is bigger
    correct: false
    score: 0.2
- question_id: JAVA-METHOD-006
  text: What does the `static` keyword mean when defining a method?
  question_type: short_answer
  topic: Method Definitions and Calls
  difficulty: 3
  cognitive_level: comprehension
  reference_answer: The `static` keyword means the method belongs to the class itself rather than to any instance of the class. Static methods can be called without creating an object of the class, using the class name directly.
  sample_student_answers:
  - text: Static methods belong to the class, not to instances. Can be called without creating objects.
    correct: true
    score: 1
  - text: Static means you can call the method using the class name without making an object.
    correct: true
    score: 1
  - text: The method belongs to the class itself, not to any specific object instance.
    correct: true
    score: 0.9
  - text: You don't need to create an object to use a static method.
    correct: true
    score: 0.8
  - text: Static methods are class methods, not instance methods.
    correct: true
    score: 0.8
  - text: Static methods are faster.
    correct: false
    score: 0
  - text: Static means the method doesn't change.
    correct: false
    score: 0
  - text: It's required for all methods.
    correct: false
    score: 0
  - text: I think it's related to memory.
    correct: false
    score: 0.1
  - text: Not sure what static does.
    correct: false
    score: 0
- question_id: JAVA-PARAM-001
  text: |
    What will be the output of this code?

    ```java
    public static void changeValue(int x) {
        x = 100;
        System.out.println("Inside method: " + x);
    }

    public static void main(String[] args) {
        int num = 5;
        changeValue(num);
        System.out.println("Outside method: " + num);
    }
    ```
  question_type: code_analysis
  topic: Parameter Passing and Return Values
  difficulty: 3
  cognitive_level: analysis
  reference_answer: |
    Inside method: 100
    Outside method: 5
  sample_student_answers:
  - text: |
      Inside method: 100
      Outside method: 5
    correct: true
    score: 1
  - text: |-
      Inside method: 100
      Outside method: 5
    correct: true
    score: 1
  - text: 100 inside, 5 outside because Java passes by value
    correct: true
    score: 1
  - text: "Inside: 100, Outside: 5. The original variable doesn't change."
    correct: true
    score: 0.9
  - text: Method shows 100, main shows 5 because parameter is a copy
    correct: true
    score: 0.9
  - text: |
      Inside method: 100
      Outside method: 100
    correct: false
    score: 0
  - text: Both will be 100
    correct: false
    score: 0
  - text: The method changes the original value
    correct: false
    score: 0
  - text: Not sure about parameter passing
    correct: false
    score: 0
  - text: I think it modifies the original variable
    correct: false
    score: 0
- question_id: JAVA-PARAM-002
  text: >
    Write a method that takes a String parameter and returns the number of vowels in it.
  question_type: coding
  topic: Parameter Passing and Return Values
  difficulty: 4
  cognitive_level: application
  reference_answer: |
    public static int countVowels(String str) {
        int count = 0;
        String vowels = "aeiouAEIOU";
        for (int i = 0; i < str.length(); i++) {
            if (vowels.indexOf(str.charAt(i)) != -1) {
                count++;
            }
        }
        return count;
    }
  sample_student_answers:
  - text: >
      public static int countVowels(String str) {
          int count = 0;
          for (int i = 0; i < str.length(); i++) {
              char c = str.charAt(i);
              if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||
                  c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                  count++;
              }
          }
          return count;
      }
    correct: true
    score: 1
  - text: |
      public static int countVowels(String str) {
          int count = 0;
          String vowels = "aeiouAEIOU";
          for (int i = 0; i < str.length(); i++) {
              if (vowels.contains(String.valueOf(str.charAt(i)))) {
                  count++;
              }
          }
          return count;
      }
    correct: true
    score: 1
  - text: |
      public static int countVowels(String str) {
          int count = 0;
          for (char c : str.toCharArray()) {
              if ("aeiouAEIOU".indexOf(c) >= 0) {
                  count++;
              }
          }
          return count;
      }
    correct: true
    score: 1
  - text: >
      public static int countVowels(String str) {
          int count = 0;
          for (int i = 0; i < str.length(); i++) {
              char c = str.charAt(i);
              if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                  count++;
              }
          }
          return count;
      }
    correct: false
    score: 0.7
  - text: |
      public static int countVowels(String str) {
          return str.replaceAll("[^aeiouAEIOU]", "").length();
      }
    correct: true
    score: 0.9
  - text: |
      public static void countVowels(String str) {
          int count = 0;
          for (int i = 0; i < str.length(); i++) {
              if (str.charAt(i) == 'a' || str.charAt(i) == 'e') {
                  count++;
              }
          }
          System.out.println(count);
      }
    correct: false
    score: 0.2
  - text: |
      public static int countVowels(String str) {
          int count = 0;
          for (String s : str) {
              if (s.equals("a") || s.equals("e")) {
                  count++;
              }
          }
          return count;
      }
    correct: false
    score: 0.1
  - text: I would loop through the string and check each character
    correct: false
    score: 0.2
  - text: Not sure how to check if a character is a vowel
    correct: false
    score: 0
  - text: Need to use charAt() method
    correct: false
    score: 0.1
- question_id: JAVA-PARAM-003
  text: What is the difference between passing primitive types and reference types as parameters to methods?
  question_type: short_answer
  topic: Parameter Passing and Return Values
  difficulty: 4
  cognitive_level: comprehension
  reference_answer: Primitive types are passed by value (a copy is made), so changes to the parameter don't affect the original variable. Reference types pass the reference by value, so while you can't change what object the reference points to, you can modify the object's contents.
  sample_student_answers:
  - text: Primitives are passed by value (copy), references pass the address so you can modify the object's contents.
    correct: true
    score: 1
  - text: Primitive parameters are copies, reference parameters let you modify the original object.
    correct: true
    score: 0.9
  - text: "Primitives: changes don't affect original. References: can modify object contents but not the reference itself."
    correct: true
    score: 1
  - text: With primitives, the method gets a copy. With objects, the method can change the object's data.
    correct: true
    score: 0.9
  - text: Primitives pass by value, objects pass by reference.
    correct: false
    score: 0.3
  - text: References are faster to pass than primitives.
    correct: false
    score: 0
  - text: Primitives are smaller so they're copied, objects are big so they're referenced.
    correct: false
    score: 0.2
  - text: You can't pass objects to methods.
    correct: false
    score: 0
  - text: I think it has to do with memory.
    correct: false
    score: 0.1
  - text: Not sure about the difference.
    correct: false
    score: 0
- question_id: JAVA-PARAM-004
  text: >
    What will this method return when called with `calculateGrade(85, 92, 78)`?


    ```java

    public static char calculateGrade(int test1, int test2, int test3) {
        double average = (test1 + test2 + test3) / 3.0;
        if (average >= 90) return 'A';
        else if (average >= 80) return 'B';
        else if (average >= 70) return 'C';
        else if (average >= 60) return 'D';
        else return 'F';
    }

    ```
  question_type: code_analysis
  topic: Parameter Passing and Return Values
  difficulty: 2
  cognitive_level: application
  reference_answer: B (The average is (85+92+78)/3.0 = 255/3.0 = 85.0, which falls in the range for grade B since 85 >= 80)
  sample_student_answers:
  - text: B (average is 85.0 which is >= 80)
    correct: true
    score: 1
  - text: B because (85+92+78)/3 = 85 and 85 >= 80
    correct: true
    score: 1
  - text: The average is 85, so it returns 'B'
    correct: true
    score: 1
  - text: B grade since 85 falls between 80 and 90
    correct: true
    score: 1
  - text: 85 average gives B grade
    correct: true
    score: 0.9
  - text: A (average is 85)
    correct: false
    score: 0
  - text: C because 85 is close to 80
    correct: false
    score: 0
  - text: 85 but not sure what grade that is
    correct: false
    score: 0.2
  - text: I need to calculate the average first
    correct: false
    score: 0.1
  - text: Not sure how to calculate the average
    correct: false
    score: 0
- question_id: JAVA-PARAM-005
  text: |
    Fix this method so it properly swaps two integer values:

    ```java
    public static void swap(int a, int b) {
        int temp = a;
        a = b;
        b = temp;
    }
    ```
  question_type: short_answer
  topic: Parameter Passing and Return Values
  difficulty: 4
  cognitive_level: analysis
  reference_answer: "This method cannot swap primitive values because Java passes primitives by value. To swap, you'd need to either: 1) Return an array: public static int[] swap(int a, int b) { return new int[]{b, a}; }, or 2) Use a wrapper class or array parameters, or 3) Return both values in some other way."
  sample_student_answers:
  - text: Can't swap primitives this way in Java. Need to return an array or use reference types.
    correct: true
    score: 1
  - text: Java passes primitives by value, so this won't work. Need to return the swapped values.
    correct: true
    score: 1
  - text: This doesn't work because parameters are copies. Could return int[] with swapped values.
    correct: true
    score: 1
  - text: Primitive parameters are copies, so swapping inside method doesn't affect original variables.
    correct: true
    score: 0.9
  - text: Need to use reference parameters or return the swapped values somehow.
    correct: true
    score: 0.8
  - text: Change void to int and return the swapped value.
    correct: false
    score: 0.2
  - text: Use static keyword differently.
    correct: false
    score: 0
  - text: Pass the variables by reference instead.
    correct: false
    score: 0.3
  - text: The logic looks correct to me.
    correct: false
    score: 0
  - text: Not sure what's wrong with it.
    correct: false
    score: 0
- question_id: JAVA-PARAM-006
  text: >
    Write a method that takes three double parameters and returns the average as a double.
  question_type: coding
  topic: Parameter Passing and Return Values
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    public static double calculateAverage(double a, double b, double c) {
        return (a + b + c) / 3.0;
    }
  sample_student_answers:
  - text: |
      public static double calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3.0;
      }
    correct: true
    score: 1
  - text: |
      public static double calculateAverage(double a, double b, double c) {
          double sum = a + b + c;
          return sum / 3;
      }
    correct: true
    score: 1
  - text: |
      public static double calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3;
      }
    correct: true
    score: 1
  - text: |
      static double calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3.0;
      }
    correct: true
    score: 0.9
  - text: |
      public double calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3.0;
      }
    correct: true
    score: 0.8
  - text: |
      public static double calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3.0f;
      }
    correct: true
    score: 0.9
  - text: |
      public static void calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3.0;
      }
    correct: false
    score: 0.3
  - text: |
      public static int calculateAverage(double a, double b, double c) {
          return (a + b + c) / 3;
      }
    correct: false
    score: 0.4
  - text: public static double calculateAverage(a, b, c) { return (a+b+c)/3; }
    correct: false
    score: 0.3
  - text: Not sure about the method signature
    correct: false
    score: 0
- question_id: JAVA-ARRAY-001
  text: |
    What will be the output of this code?

    ```java
    int[] numbers = {10, 20, 30, 40, 50};
    System.out.println(numbers[2]);
    System.out.println(numbers.length);
    ```
  question_type: code_analysis
  topic: 1D and 2D Arrays
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: |
    30
    5
  sample_student_answers:
  - text: |
      30
      5
    correct: true
    score: 1
  - text: |-
      30
      5
    correct: true
    score: 1
  - text: 30 and 5
    correct: true
    score: 0.9
  - text: Index 2 is 30, array length is 5
    correct: true
    score: 0.9
  - text: Third element (30) and size (5)
    correct: true
    score: 0.8
  - text: |
      20
      5
    correct: false
    score: 0.3
  - text: |
      30
      4
    correct: false
    score: 0.3
  - text: numbers[2] and numbers.length
    correct: false
    score: 0.1
  - text: It prints array values
    correct: false
    score: 0.1
  - text: Not sure about array indexing
    correct: false
    score: 0
- question_id: JAVA-ARRAY-002
  text: >
    Write code to create an integer array of size 5 and fill it with values 2, 4, 6, 8, 10.
  question_type: coding
  topic: 1D and 2D Arrays
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    int[] array = {2, 4, 6, 8, 10};
    // Or:
    int[] array = new int[5];
    array[0] = 2;
    array[1] = 4;
    array[2] = 6;
    array[3] = 8;
    array[4] = 10;
    // Or:
    int[] array = new int[5];
    for (int i = 0; i < 5; i++) {
        array[i] = (i + 1) * 2;
    }
  sample_student_answers:
  - text: int[] array = {2, 4, 6, 8, 10};
    correct: true
    score: 1
  - text: |
      int[] array = new int[5];
      array[0] = 2;
      array[1] = 4;
      array[2] = 6;
      array[3] = 8;
      array[4] = 10;
    correct: true
    score: 1
  - text: |
      int[] array = new int[5];
      for (int i = 0; i < 5; i++) {
          array[i] = (i + 1) * 2;
      }
    correct: true
    score: 1
  - text: int array[] = {2, 4, 6, 8, 10};
    correct: true
    score: 1
  - text: |
      int[] array = new int[]{2, 4, 6, 8, 10};
    correct: true
    score: 1
  - text: |
      int[] array = new int[5];
      for (int i = 0; i < array.length; i++) {
          array[i] = i * 2;
      }
    correct: false
    score: 0.6
  - text: int array[5] = {2, 4, 6, 8, 10};
    correct: false
    score: 0.4
  - text: int[] array = new int[5] {2, 4, 6, 8, 10};
    correct: false
    score: 0.3
  - text: array[5] = {2, 4, 6, 8, 10};
    correct: false
    score: 0.2
  - text: Not sure about array syntax
    correct: false
    score: 0
- question_id: JAVA-ARRAY-003
  text: |
    What will this code print?

    ```java
    int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    System.out.println(matrix[1][2]);
    System.out.println(matrix.length);
    System.out.println(matrix[0].length);
    ```
  question_type: code_analysis
  topic: 1D and 2D Arrays
  difficulty: 3
  cognitive_level: analysis
  reference_answer: |
    6
    3
    3
  sample_student_answers:
  - text: |
      6
      3
      3
    correct: true
    score: 1
  - text: |-
      6
      3
      3
    correct: true
    score: 1
  - text: 6 (element at row 1, col 2), 3 (number of rows), 3 (number of columns)
    correct: true
    score: 1
  - text: Element 6, 3 rows, 3 columns
    correct: true
    score: 0.9
  - text: matrix[1][2] = 6, matrix has 3 rows and 3 columns
    correct: true
    score: 0.9
  - text: |
      5
      3
      3
    correct: false
    score: 0.4
  - text: |
      6
      2
      3
    correct: false
    score: 0.4
  - text: Second row, third column is 6
    correct: false
    score: 0.3
  - text: Not sure about 2D array indexing
    correct: false
    score: 0
  - text: Matrix operations are confusing
    correct: false
    score: 0
- question_id: JAVA-ARRAY-004
  text: >
    Write a method that takes an integer array as parameter and returns the sum of all elements.
  question_type: coding
  topic: 1D and 2D Arrays
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    public static int sumArray(int[] array) {
        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        return sum;
    }
    // Or using enhanced for loop:
    public static int sumArray(int[] array) {
        int sum = 0;
        for (int num : array) {
            sum += num;
        }
        return sum;
    }
  sample_student_answers:
  - text: |
      public static int sumArray(int[] array) {
          int sum = 0;
          for (int i = 0; i < array.length; i++) {
              sum += array[i];
          }
          return sum;
      }
    correct: true
    score: 1
  - text: |
      public static int sumArray(int[] array) {
          int sum = 0;
          for (int num : array) {
              sum += num;
          }
          return sum;
      }
    correct: true
    score: 1
  - text: |
      public static int sumArray(int[] array) {
          int total = 0;
          for (int i = 0; i < array.length; i++) {
              total = total + array[i];
          }
          return total;
      }
    correct: true
    score: 1
  - text: |
      public static int sumArray(int[] array) {
          int sum = 0;
          int i = 0;
          while (i < array.length) {
              sum += array[i];
              i++;
          }
          return sum;
      }
    correct: true
    score: 1
  - text: |
      static int sumArray(int[] array) {
          int sum = 0;
          for (int i = 0; i < array.length; i++) {
              sum += array[i];
          }
          return sum;
      }
    correct: true
    score: 0.9
  - text: |
      public static int sumArray(int[] array) {
          int sum = 0;
          for (int i = 0; i <= array.length; i++) {
              sum += array[i];
          }
          return sum;
      }
    correct: false
    score: 0.2
  - text: |
      public static void sumArray(int[] array) {
          int sum = 0;
          for (int i = 0; i < array.length; i++) {
              sum += array[i];
          }
          System.out.println(sum);
      }
    correct: false
    score: 0.4
  - text: |
      public static int sumArray(int array) {
          return array.sum();
      }
    correct: false
    score: 0
  - text: I would loop through the array and add each element
    correct: false
    score: 0.2
  - text: Use a for loop to go through array elements
    correct: false
    score: 0.1
- question_id: JAVA-ARRAY-005
  text: What is the difference between `int[] arr = new int[5];` and `int[] arr = {1, 2, 3, 4, 5};`?
  question_type: short_answer
  topic: 1D and 2D Arrays
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: The first creates an array of size 5 with default values (0 for int), while the second creates an array of size 5 with specified initial values {1, 2, 3, 4, 5}.
  sample_student_answers:
  - text: First creates array with default values (0), second creates array with specified values.
    correct: true
    score: 1
  - text: new int[5] makes empty array with zeros, {1,2,3,4,5} makes array with those values.
    correct: true
    score: 1
  - text: First declaration creates array filled with 0s, second creates array with given values.
    correct: true
    score: 1
  - text: new int[5] initializes with default values, the other initializes with specific values.
    correct: true
    score: 1
  - text: One has zeros, the other has the numbers 1 through 5.
    correct: true
    score: 0.9
  - text: First one is empty, second one has values.
    correct: false
    score: 0.3
  - text: Different syntax for creating arrays.
    correct: false
    score: 0.2
  - text: One is longer than the other.
    correct: false
    score: 0
  - text: Not sure about the difference.
    correct: false
    score: 0
  - text: Both create arrays of size 5.
    correct: false
    score: 0.2
- question_id: JAVA-ARRAY-006
  text: |
    What is wrong with this code?

    ```java
    int[] numbers = {1, 2, 3, 4, 5};
    for (int i = 0; i <= numbers.length; i++) {
        System.out.println(numbers[i]);
    }
    ```
  question_type: short_answer
  topic: 1D and 2D Arrays
  difficulty: 2
  cognitive_level: analysis
  reference_answer: The loop condition uses `i <= numbers.length` which will cause an ArrayIndexOutOfBoundsException. Array indices go from 0 to length-1, so it should be `i < numbers.length`.
  sample_student_answers:
  - text: The condition should be i < numbers.length, not i <= numbers.length. Will get ArrayIndexOutOfBoundsException.
    correct: true
    score: 1
  - text: Loop tries to access index 5 but array only has indices 0-4. Should use i < numbers.length.
    correct: true
    score: 1
  - text: Array index out of bounds error because i goes to 5 but max index is 4.
    correct: true
    score: 1
  - text: The <= should be < because array indices start at 0.
    correct: true
    score: 0.9
  - text: Will crash when i equals numbers.length because that index doesn't exist.
    correct: true
    score: 0.9
  - text: The loop condition is wrong.
    correct: false
    score: 0.2
  - text: It will print one extra time.
    correct: false
    score: 0.3
  - text: Array indexing problem.
    correct: false
    score: 0.2
  - text: Something about the loop bounds.
    correct: false
    score: 0.1
  - text: Looks correct to me.
    correct: false
    score: 0
- question_id: JAVA-ARRAYLIST-001
  text: |
    What will be the output of this code?

    ```java
    import java.util.ArrayList;

    ArrayList<String> list = new ArrayList<>();
    list.add("Apple");
    list.add("Banana");
    list.add("Cherry");
    System.out.println(list.size());
    System.out.println(list.get(1));
    ```
  question_type: code_analysis
  topic: ArrayLists and Collections
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: |
    3
    Banana
  sample_student_answers:
  - text: |
      3
      Banana
    correct: true
    score: 1
  - text: |-
      3
      Banana
    correct: true
    score: 1
  - text: Size is 3, element at index 1 is Banana
    correct: true
    score: 1
  - text: 3 elements, second element is Banana
    correct: true
    score: 0.9
  - text: ArrayList has 3 items, index 1 contains Banana
    correct: true
    score: 0.9
  - text: |
      3
      Apple
    correct: false
    score: 0.3
  - text: |
      2
      Banana
    correct: false
    score: 0.3
  - text: list.size() and list.get(1)
    correct: false
    score: 0.1
  - text: It prints the list contents
    correct: false
    score: 0.1
  - text: Not sure about ArrayList methods
    correct: false
    score: 0
- question_id: JAVA-ARRAYLIST-002
  text: >
    Write code to create an ArrayList of integers, add the numbers 10, 20, 30 to it, then remove the element at index 1.
  question_type: coding
  topic: ArrayLists and Collections
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    import java.util.ArrayList;

    ArrayList<Integer> list = new ArrayList<>();
    list.add(10);
    list.add(20);
    list.add(30);
    list.remove(1);
  sample_student_answers:
  - text: |
      ArrayList<Integer> list = new ArrayList<>();
      list.add(10);
      list.add(20);
      list.add(30);
      list.remove(1);
    correct: true
    score: 1
  - text: |
      import java.util.ArrayList;
      ArrayList<Integer> list = new ArrayList<>();
      list.add(10);
      list.add(20);
      list.add(30);
      list.remove(1);
    correct: true
    score: 1
  - text: |
      ArrayList<Integer> numbers = new ArrayList<>();
      numbers.add(10);
      numbers.add(20);
      numbers.add(30);
      numbers.remove(1);
    correct: true
    score: 1
  - text: |
      ArrayList<Integer> list = new ArrayList<Integer>();
      list.add(10);
      list.add(20);
      list.add(30);
      list.remove(1);
    correct: true
    score: 1
  - text: |
      ArrayList<Integer> list = new ArrayList<>();
      list.add(10);
      list.add(20);
      list.add(30);
      list.delete(1);
    correct: false
    score: 0.7
  - text: |
      ArrayList<int> list = new ArrayList<>();
      list.add(10);
      list.add(20);
      list.add(30);
      list.remove(1);
    correct: false
    score: 0.7
  - text: |
      ArrayList list = new ArrayList();
      list.add(10);
      list.add(20);
      list.add(30);
      list.remove(1);
    correct: false
    score: 0.6
  - text: |
      ArrayList<Integer> list = new ArrayList<>();
      list.add(10, 20, 30);
      list.remove(1);
    correct: false
    score: 0.3
  - text: ArrayList<Integer> list = new ArrayList<>(10, 20, 30); list.remove(1);
    correct: false
    score: 0.2
  - text: Not sure about ArrayList syntax
    correct: false
    score: 0
- question_id: JAVA-ARRAYLIST-003
  text: What is the difference between ArrayList and Array in Java?
  question_type: short_answer
  topic: ArrayLists and Collections
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: >
    ArrayList is dynamic (can grow/shrink), part of Collections framework, stores objects only, has built-in methods like add/remove. Arrays are fixed size, can store primitives or objects, accessed with [] notation, and are faster for basic operations.
  sample_student_answers:
  - text: ArrayList can change size, arrays are fixed. ArrayList has methods like add(), remove().
    correct: true
    score: 1
  - text: ArrayList is dynamic, array is static size. ArrayList is slower but more flexible.
    correct: true
    score: 0.9
  - text: ArrayList grows automatically, arrays don't. ArrayList uses methods, arrays use brackets.
    correct: true
    score: 0.8
  - text: ArrayList is a class, array is primitive type
    correct: false
    score: 0.4
  - text: ArrayList is better than arrays
    correct: false
    score: 0.2
  - text: Arrays are faster
    correct: false
    score: 0.3
  - text: ArrayList uses generics
    correct: false
    score: 0.3
  - text: ArrayList is part of collections
    correct: false
    score: 0.3
  - text: Not sure about the difference
    correct: false
    score: 0
  - text: They're basically the same thing
    correct: false
    score: 0
- question_id: JAVA-ARRAYLIST-004
  text: |
    What will be the output of this code?
    ```java
    ArrayList<String> fruits = new ArrayList<>();
    fruits.add("apple");
    fruits.add("banana");
    fruits.add("orange");
    System.out.println(fruits.get(1));
    System.out.println(fruits.size());
    ```
  question_type: code_analysis
  topic: ArrayLists and Collections
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    banana
    3
  sample_student_answers:
  - text: |
      banana
      3
    correct: true
    score: 1
  - text: |-
      banana
      3
    correct: true
    score: 1
  - text: First prints banana, then prints 3
    correct: true
    score: 0.9
  - text: |
      apple
      3
    correct: false
    score: 0.5
  - text: |
      banana
      2
    correct: false
    score: 0.5
  - text: It prints the second fruit and the total count
    correct: false
    score: 0.4
  - text: orange 3
    correct: false
    score: 0.2
  - text: It will print all fruits
    correct: false
    score: 0.1
  - text: Index 1 is the first element
    correct: false
    score: 0
  - text: Not sure about get() method
    correct: false
    score: 0
- question_id: JAVA-ARRAYLIST-005
  text: "True or False: ArrayList can store different data types in the same list without using generics."
  question_type: true_false
  topic: ArrayLists and Collections
  difficulty: 3
  cognitive_level: knowledge
  reference_answer: True. Without generics, ArrayList stores Objects and can hold different types, but this is not recommended as it requires casting and can cause runtime errors.
  sample_student_answers:
  - text: "True"
    correct: true
    score: 1
  - text: True, but it's not good practice
    correct: true
    score: 1
  - text: True, it stores Objects without generics
    correct: true
    score: 1
  - text: "False"
    correct: false
    score: 0
  - text: False, ArrayList is type-safe
    correct: false
    score: 0
  - text: False, you need generics for different types
    correct: false
    score: 0
  - text: True, but you need to cast
    correct: false
    score: 0.7
  - text: True, that's why we use generics
    correct: false
    score: 0.6
  - text: I think False because of type safety
    correct: false
    score: 0
  - text: Not sure about generics
    correct: false
    score: 0
- question_id: JAVA-ARRAYLIST-006
  text: |
    Fill in the blank to iterate through an ArrayList using enhanced for loop:
    ```java
    ArrayList<Integer> numbers = new ArrayList<>();
    numbers.add(1);
    numbers.add(2);
    numbers.add(3);

    for (______ num : numbers) {
        System.out.println(num);
    }
    ```
  question_type: fill_blank
  topic: ArrayLists and Collections
  difficulty: 2
  cognitive_level: application
  reference_answer: Integer
  sample_student_answers:
  - text: Integer
    correct: true
    score: 1
  - text: int
    correct: true
    score: 0.9
  - text: Integer num
    correct: false
    score: 0.5
  - text: int num
    correct: false
    score: 0.5
  - text: var
    correct: false
    score: 0.3
  - text: Object
    correct: false
    score: 0.2
  - text: String
    correct: false
    score: 0
  - text: each
    correct: false
    score: 0
  - text: item
    correct: false
    score: 0
  - text: I don't know enhanced for loop syntax
    correct: false
    score: 0
- question_id: JAVA-CLASS-001
  text: >
    Write a simple class called `Car` with two instance variables: `brand` (String) and `year` (int). Include a method called `displayInfo()` that prints both values.
  question_type: coding
  topic: Class Definition and Object Creation
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    public class Car {
        String brand;
        int year;
        
        public void displayInfo() {
            System.out.println("Brand: " + brand + ", Year: " + year);
        }
    }
  sample_student_answers:
  - text: |
      public class Car {
          String brand;
          int year;
          
          public void displayInfo() {
              System.out.println("Brand: " + brand + ", Year: " + year);
          }
      }
    correct: true
    score: 1
  - text: |
      class Car {
          String brand;
          int year;
          
          void displayInfo() {
              System.out.println("Brand: " + brand + ", Year: " + year);
          }
      }
    correct: true
    score: 0.9
  - text: |
      public class Car {
          private String brand;
          private int year;
          
          public void displayInfo() {
              System.out.println("Brand: " + brand + ", Year: " + year);
          }
      }
    correct: true
    score: 1
  - text: |
      public class Car {
          String brand;
          int year;
          
          public void displayInfo() {
              System.out.println(brand + " " + year);
          }
      }
    correct: true
    score: 0.8
  - text: >
      public class Car {
          String brand;
          int year;
          
          public void displayInfo() {
              System.out.println("Brand: " + this.brand + ", Year: " + this.year);
          }
      }
    correct: true
    score: 1
  - text: |
      public class Car {
          String brand;
          int year;
          
          public displayInfo() {
              System.out.println("Brand: " + brand + ", Year: " + year);
          }
      }
    correct: false
    score: 0.7
  - text: |
      public class Car {
          brand;
          year;
          
          public void displayInfo() {
              System.out.println("Brand: " + brand + ", Year: " + year);
          }
      }
    correct: false
    score: 0.5
  - text: |
      class Car {
          String brand;
          int year;
      }
    correct: false
    score: 0.4
  - text: public class Car { String brand, year; void displayInfo() { print brand and year; } }
    correct: false
    score: 0.2
  - text: I'm not sure about class syntax
    correct: false
    score: 0
- question_id: JAVA-CLASS-002
  text: >
    What will be printed when this code runs?

    ```java

    public class Student {
        String name = "Unknown";
        int age;
        
        public void introduce() {
            System.out.println("Hi, I'm " + name + " and I'm " + age + " years old.");
        }
    }


    public class Main {
        public static void main(String[] args) {
            Student s = new Student();
            s.introduce();
        }
    }

    ```
  question_type: code_analysis
  topic: Class Definition and Object Creation
  difficulty: 2
  cognitive_level: analysis
  reference_answer: Hi, I'm Unknown and I'm 0 years old.
  sample_student_answers:
  - text: Hi, I'm Unknown and I'm 0 years old.
    correct: true
    score: 1
  - text: Hi, I'm Unknown and I'm 0 years old
    correct: true
    score: 0.9
  - text: "It prints: Hi, I'm Unknown and I'm 0 years old."
    correct: true
    score: 1
  - text: Hi, I'm Unknown and I'm  years old.
    correct: false
    score: 0.7
  - text: Hi, I'm  and I'm 0 years old.
    correct: false
    score: 0.6
  - text: It will print the default values
    correct: false
    score: 0.4
  - text: Hi, I'm null and I'm 0 years old.
    correct: false
    score: 0.5
  - text: The code won't compile because age is not initialized
    correct: false
    score: 0
  - text: It prints the student's introduction
    correct: false
    score: 0.2
  - text: Not sure what default values are
    correct: false
    score: 0
- question_id: JAVA-CLASS-003
  text: What is the difference between a class and an object in Java?
  question_type: short_answer
  topic: Class Definition and Object Creation
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: A class is a blueprint or template that defines the structure and behavior of objects. An object is an instance of a class - it's the actual entity created in memory with specific values for the class's attributes.
  sample_student_answers:
  - text: A class is a blueprint, an object is an instance of that class created in memory.
    correct: true
    score: 1
  - text: Class is the template, object is the actual thing created from the template.
    correct: true
    score: 0.9
  - text: Class defines what an object should look like, object is the real thing.
    correct: true
    score: 0.8
  - text: Class is like a cookie cutter, object is the cookie.
    correct: true
    score: 0.8
  - text: Object is created from class using new keyword.
    correct: false
    score: 0.5
  - text: Class is abstract, object is concrete.
    correct: false
    score: 0.6
  - text: Class has methods and variables, object has values.
    correct: false
    score: 0.4
  - text: Class is static, object is dynamic.
    correct: false
    score: 0.2
  - text: Object is inside a class.
    correct: false
    score: 0.1
  - text: I think they're similar concepts.
    correct: false
    score: 0
- question_id: JAVA-CLASS-004
  text: "True or False: You can create multiple objects from the same class, and each object will have its own copy of instance variables."
  question_type: true_false
  topic: Class Definition and Object Creation
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: True. Each object created from a class has its own separate copy of instance variables, so changes to one object don't affect other objects of the same class.
  sample_student_answers:
  - text: "True"
    correct: true
    score: 1
  - text: True, each object has its own memory space.
    correct: true
    score: 1
  - text: True, that's how objects work in Java.
    correct: true
    score: 1
  - text: True, objects are independent of each other.
    correct: true
    score: 1
  - text: "False"
    correct: false
    score: 0
  - text: False, they share the same variables.
    correct: false
    score: 0
  - text: False, objects share memory.
    correct: false
    score: 0
  - text: True, but static variables are shared.
    correct: false
    score: 0.7
  - text: I think True, but not sure about memory.
    correct: false
    score: 0.5
  - text: Not sure about object memory allocation.
    correct: false
    score: 0
- question_id: JAVA-CLASS-005
  text: |
    Fill in the blank to create an object of the Dog class:
    ```java
    public class Dog {
        String breed;
        int age;
    }

    public class Main {
        public static void main(String[] args) {
            ______ myDog = new Dog();
        }
    }
    ```
  question_type: fill_blank
  topic: Class Definition and Object Creation
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: Dog
  sample_student_answers:
  - text: Dog
    correct: true
    score: 1
  - text: Dog myDog
    correct: false
    score: 0.5
  - text: Object
    correct: false
    score: 0.2
  - text: String
    correct: false
    score: 0
  - text: new Dog()
    correct: false
    score: 0.3
  - text: Class
    correct: false
    score: 0
  - text: var
    correct: false
    score: 0.2
  - text: int
    correct: false
    score: 0
  - text: public Dog
    correct: false
    score: 0.2
  - text: I don't know object creation syntax
    correct: false
    score: 0
- question_id: JAVA-CLASS-006
  text: |
    What's wrong with this code?
    ```java
    public class Book {
        String title;
        int pages;
        
        public void showInfo() {
            System.out.println(title + " has " + pages + " pages");
        }
    }

    public class Library {
        public static void main(String[] args) {
            Book.showInfo();
        }
    }
    ```
  question_type: code_analysis
  topic: Class Definition and Object Creation
  difficulty: 3
  cognitive_level: analysis
  reference_answer: The error is trying to call an instance method (showInfo()) on the class itself (Book.showInfo()) instead of creating an object first. You need to create a Book object and then call the method on that object.
  sample_student_answers:
  - text: "You need to create a Book object first before calling showInfo(). Should be: Book b = new Book(); b.showInfo();"
    correct: true
    score: 1
  - text: showInfo() is an instance method, can't call it directly on the class. Need to create an object.
    correct: true
    score: 1
  - text: You're calling a non-static method on the class. Need an object instance.
    correct: true
    score: 0.9
  - text: Book.showInfo() is wrong, should create object first.
    correct: true
    score: 0.8
  - text: Missing new Book() before calling showInfo().
    correct: true
    score: 0.8
  - text: The method should be static.
    correct: false
    score: 0.3
  - text: Missing semicolon.
    correct: false
    score: 0
  - text: showInfo() method is not defined properly.
    correct: false
    score: 0.1
  - text: Class names should be lowercase.
    correct: false
    score: 0
  - text: Not sure what's wrong with the code.
    correct: false
    score: 0
- question_id: JAVA-CONSTRUCTOR-001
  text: >
    Create a class called `Person` with a constructor that takes two parameters: `name` (String) and `age` (int). The constructor should initialize the instance variables.
  question_type: coding
  topic: Constructors and Overloading
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    public class Person {
        String name;
        int age;
        
        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }
    }
  sample_student_answers:
  - text: |
      public class Person {
          String name;
          int age;
          
          public Person(String name, int age) {
              this.name = name;
              this.age = age;
          }
      }
    correct: true
    score: 1
  - text: |
      public class Person {
          String name;
          int age;
          
          public Person(String n, int a) {
              name = n;
              age = a;
          }
      }
    correct: true
    score: 0.9
  - text: |
      class Person {
          String name;
          int age;
          
          Person(String name, int age) {
              this.name = name;
              this.age = age;
          }
      }
    correct: true
    score: 0.9
  - text: |
      public class Person {
          private String name;
          private int age;
          
          public Person(String name, int age) {
              this.name = name;
              this.age = age;
          }
      }
    correct: true
    score: 1
  - text: |
      public class Person {
          String name;
          int age;
          
          public void Person(String name, int age) {
              this.name = name;
              this.age = age;
          }
      }
    correct: false
    score: 0.5
  - text: |
      public class Person {
          String name;
          int age;
          
          public Person(name, age) {
              this.name = name;
              this.age = age;
          }
      }
    correct: false
    score: 0.7
  - text: |
      public class Person {
          String name;
          int age;
          
          public Person(String name, int age) {
              name = name;
              age = age;
          }
      }
    correct: false
    score: 0.6
  - text: |
      public class Person {
          public Person(String name, int age) {
              String name = name;
              int age = age;
          }
      }
    correct: false
    score: 0.3
  - text: public class Person { constructor(String name, int age) { this.name = name; this.age = age; } }
    correct: false
    score: 0.2
  - text: I don't remember constructor syntax
    correct: false
    score: 0
- question_id: JAVA-CONSTRUCTOR-002
  text: What is the purpose of a constructor in Java?
  question_type: short_answer
  topic: Constructors and Overloading
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: A constructor is a special method that is automatically called when an object is created. Its purpose is to initialize the object's instance variables and set up the object's initial state.
  sample_student_answers:
  - text: A constructor initializes an object when it's created. It sets up the initial values of instance variables.
    correct: true
    score: 1
  - text: Constructor is called automatically when you use 'new' to create an object. It initializes the object.
    correct: true
    score: 1
  - text: To set up an object's initial state and initialize variables when the object is created.
    correct: true
    score: 1
  - text: Constructor creates objects and gives them starting values.
    correct: true
    score: 0.8
  - text: It initializes the object.
    correct: true
    score: 0.7
  - text: Constructor makes new objects.
    correct: false
    score: 0.4
  - text: It's like a method that runs first.
    correct: false
    score: 0.3
  - text: Constructor is for building classes.
    correct: false
    score: 0.2
  - text: I think it's for creating instances.
    correct: false
    score: 0.3
  - text: Not sure what constructors do.
    correct: false
    score: 0
- question_id: JAVA-CONSTRUCTOR-003
  text: |
    What will be the output of this code?
    ```java
    public class Rectangle {
        int width, height;
        
        public Rectangle() {
            width = 5;
            height = 3;
        }
        
        public Rectangle(int w, int h) {
            width = w;
            height = h;
        }
        
        public void display() {
            System.out.println("Width: " + width + ", Height: " + height);
        }
    }

    public class Main {
        public static void main(String[] args) {
            Rectangle r1 = new Rectangle();
            Rectangle r2 = new Rectangle(10, 8);
            r1.display();
            r2.display();
        }
    }
    ```
  question_type: code_analysis
  topic: Constructors and Overloading
  difficulty: 3
  cognitive_level: analysis
  reference_answer: |
    Width: 5, Height: 3
    Width: 10, Height: 8
  sample_student_answers:
  - text: |
      Width: 5, Height: 3
      Width: 10, Height: 8
    correct: true
    score: 1
  - text: |-
      Width: 5, Height: 3
      Width: 10, Height: 8
    correct: true
    score: 1
  - text: "First rectangle: Width: 5, Height: 3, Second rectangle: Width: 10, Height: 8"
    correct: true
    score: 0.9
  - text: |
      Width: 5, Height: 3
      Width: 5, Height: 3
    correct: false
    score: 0.5
  - text: |
      Width: 10, Height: 8
      Width: 10, Height: 8
    correct: false
    score: 0.3
  - text: It will show the dimensions of both rectangles
    correct: false
    score: 0.4
  - text: 5, 3, 10, 8
    correct: false
    score: 0.3
  - text: The code won't compile because of constructor overloading
    correct: false
    score: 0
  - text: Both rectangles will have the same values
    correct: false
    score: 0.1
  - text: Not sure about constructor overloading
    correct: false
    score: 0
- question_id: JAVA-CONSTRUCTOR-004
  text: "True or False: A class can have multiple constructors with different parameters."
  question_type: true_false
  topic: Constructors and Overloading
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: True. This is called constructor overloading. A class can have multiple constructors as long as they have different parameter lists (different number or types of parameters).
  sample_student_answers:
  - text: "True"
    correct: true
    score: 1
  - text: True, this is called constructor overloading.
    correct: true
    score: 1
  - text: True, as long as they have different parameters.
    correct: true
    score: 1
  - text: True, you can overload constructors.
    correct: true
    score: 1
  - text: "False"
    correct: false
    score: 0
  - text: False, only one constructor per class.
    correct: false
    score: 0
  - text: False, that would cause conflicts.
    correct: false
    score: 0
  - text: True, but they must have different names.
    correct: false
    score: 0.3
  - text: I think True, but not sure about the rules.
    correct: false
    score: 0.5
  - text: Don't know about multiple constructors.
    correct: false
    score: 0
- question_id: JAVA-CONSTRUCTOR-005
  text: |
    Fill in the blank to call another constructor from within a constructor:
    ```java
    public class Student {
        String name;
        int age;
        String grade;
        
        public Student(String name, int age) {
            this.name = name;
            this.age = age;
        }
        
        public Student(String name, int age, String grade) {
            ______(name, age);
            this.grade = grade;
        }
    }
    ```
  question_type: fill_blank
  topic: Constructors and Overloading
  difficulty: 3
  cognitive_level: application
  reference_answer: this
  sample_student_answers:
  - text: this
    correct: true
    score: 1
  - text: this(name, age)
    correct: false
    score: 0.7
  - text: super
    correct: false
    score: 0.2
  - text: Student
    correct: false
    score: 0.1
  - text: call
    correct: false
    score: 0
  - text: new
    correct: false
    score: 0
  - text: invoke
    correct: false
    score: 0
  - text: constructor
    correct: false
    score: 0
  - text: self
    correct: false
    score: 0
  - text: I don't know how to call other constructors
    correct: false
    score: 0
- question_id: JAVA-CONSTRUCTOR-006
  text: |
    What's wrong with this constructor?
    ```java
    public class Car {
        String brand;
        int year;
        
        public String Car(String brand, int year) {
            this.brand = brand;
            this.year = year;
        }
    }
    ```
  question_type: code_analysis
  topic: Constructors and Overloading
  difficulty: 2
  cognitive_level: analysis
  reference_answer: "Constructors cannot have a return type. The 'String' before 'Car' should be removed. Constructors should be: public Car(String brand, int year)"
  sample_student_answers:
  - text: Constructors don't have return types. Remove 'String' before Car.
    correct: true
    score: 1
  - text: "Constructor shouldn't have String return type. Should be: public Car(String brand, int year)"
    correct: true
    score: 1
  - text: Remove the return type 'String'. Constructors don't return anything.
    correct: true
    score: 1
  - text: Constructors can't return values, remove String.
    correct: true
    score: 0.9
  - text: The method should be void, not String.
    correct: false
    score: 0.3
  - text: Constructor should return the object being created.
    correct: false
    score: 0.1
  - text: Missing return statement.
    correct: false
    score: 0
  - text: Parameter names are wrong.
    correct: false
    score: 0
  - text: Should use 'new' keyword.
    correct: false
    score: 0
  - text: I think the syntax looks correct.
    correct: false
    score: 0
- question_id: JAVA-ENCAP-001
  text: >
    Create a class called `BankAccount` with a private instance variable `balance` (double) and public methods `deposit(double amount)` and `getBalance()`.
  question_type: coding
  topic: Encapsulation and Access Modifiers
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    public class BankAccount {
        private double balance;
        
        public void deposit(double amount) {
            balance += amount;
        }
        
        public double getBalance() {
            return balance;
        }
    }
  sample_student_answers:
  - text: |
      public class BankAccount {
          private double balance;
          
          public void deposit(double amount) {
              balance += amount;
          }
          
          public double getBalance() {
              return balance;
          }
      }
    correct: true
    score: 1
  - text: |
      public class BankAccount {
          private double balance;
          
          public deposit(double amount) {
              balance += amount;
          }
          
          public double getBalance() {
              return balance;
          }
      }
    correct: false
    score: 0.7
  - text: |
      public class BankAccount {
          double balance;
          
          public void deposit(double amount) {
              balance += amount;
          }
          
          public double getBalance() {
              return balance;
          }
      }
    correct: false
    score: 0.6
  - text: |
      public class BankAccount {
          private double balance;
          
          public void deposit(double amount) {
              balance = amount;
          }
          
          public double getBalance() {
              return balance;
          }
      }
    correct: false
    score: 0.7
  - text: |
      public class BankAccount {
          private double balance;
          
          public void deposit(double amount) {
              balance + amount;
          }
          
          public getBalance() {
              return balance;
          }
      }
    correct: false
    score: 0.4
  - text: |
      class BankAccount {
          private balance;
          public void deposit(amount) { balance += amount; }
          public getBalance() { return balance; }
      }
    correct: false
    score: 0.3
  - text: public class BankAccount { private double balance; deposit and getBalance methods }
    correct: false
    score: 0.2
  - text: I'm not sure about private variables and public methods
    correct: false
    score: 0
- question_id: JAVA-ENCAP-002
  text: What are the four access modifiers in Java and what do they mean?
  question_type: short_answer
  topic: Encapsulation and Access Modifiers
  difficulty: 3
  cognitive_level: knowledge
  reference_answer: public (accessible everywhere), private (accessible only within the same class), protected (accessible within package and subclasses), package-private/default (accessible within the same package only - no modifier specified).
  sample_student_answers:
  - text: public (accessible everywhere), private (only in same class), protected (package and subclasses), package-private (same package only)
    correct: true
    score: 1
  - text: public, private, protected, and default. Public is everywhere, private is same class only, protected is inheritance, default is same package.
    correct: true
    score: 1
  - text: public (all access), private (class only), protected (subclasses), default (package level)
    correct: true
    score: 0.9
  - text: public, private, protected, static
    correct: false
    score: 0.3
  - text: public means everyone can access, private means only the class can access
    correct: false
    score: 0.5
  - text: public, private, protected - I forgot the fourth one
    correct: false
    score: 0.6
  - text: There are public and private, not sure about others
    correct: false
    score: 0.3
  - text: Access modifiers control who can see variables and methods
    correct: false
    score: 0.2
  - text: public, private, final, abstract
    correct: false
    score: 0.1
  - text: I only know public and private
    correct: false
    score: 0.2
- question_id: JAVA-ENCAP-003
  text: |
    What will happen when this code is compiled and run?
    ```java
    public class Test {
        private int value = 10;
        
        public void setValue(int v) {
            value = v;
        }
    }

    public class Main {
        public static void main(String[] args) {
            Test t = new Test();
            System.out.println(t.value);
        }
    }
    ```
  question_type: code_analysis
  topic: Encapsulation and Access Modifiers
  difficulty: 3
  cognitive_level: analysis
  reference_answer: The code will not compile. There will be a compilation error because 'value' is private and cannot be accessed directly from outside the Test class. You would need a public getter method to access it.
  sample_student_answers:
  - text: Compilation error. Cannot access private variable 'value' from outside the class.
    correct: true
    score: 1
  - text: The code won't compile because value is private and can't be accessed from Main class.
    correct: true
    score: 1
  - text: Compile error - private members can't be accessed directly from other classes.
    correct: true
    score: 1
  - text: Error because t.value tries to access a private field.
    correct: true
    score: 0.9
  - text: It will print 10
    correct: false
    score: 0
  - text: It will print 0
    correct: false
    score: 0
  - text: Runtime error when trying to access private field
    correct: false
    score: 0.3
  - text: The code will run but print nothing
    correct: false
    score: 0
  - text: It depends on the access modifier
    correct: false
    score: 0.1
  - text: Not sure what happens with private variables
    correct: false
    score: 0
- question_id: JAVA-ENCAP-004
  text: "True or False: Encapsulation means hiding the internal details of a class and providing controlled access through public methods."
  question_type: true_false
  topic: Encapsulation and Access Modifiers
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: True. Encapsulation is the principle of hiding internal implementation details and providing controlled access to class members through public methods (getters and setters).
  sample_student_answers:
  - text: "True"
    correct: true
    score: 1
  - text: True, that's the definition of encapsulation.
    correct: true
    score: 1
  - text: True, encapsulation uses private variables and public methods.
    correct: true
    score: 1
  - text: True, it's about data hiding and controlled access.
    correct: true
    score: 1
  - text: "False"
    correct: false
    score: 0
  - text: False, encapsulation is about inheritance.
    correct: false
    score: 0
  - text: False, encapsulation is making everything public.
    correct: false
    score: 0
  - text: True, but I'm not sure about the controlled access part.
    correct: false
    score: 0.7
  - text: I think True, encapsulation hides data.
    correct: false
    score: 0.6
  - text: Not sure what encapsulation means.
    correct: false
    score: 0
- question_id: JAVA-ENCAP-005
  text: >
    Fill in the blank to create a proper getter method for a private variable called `name`:

    ```java

    public class Person {
        private String name;
        
        public ______ getName() {
            return name;
        }
    }

    ```
  question_type: fill_blank
  topic: Encapsulation and Access Modifiers
  difficulty: 1
  cognitive_level: knowledge
  reference_answer: String
  sample_student_answers:
  - text: String
    correct: true
    score: 1
  - text: String getName()
    correct: false
    score: 0.5
  - text: void
    correct: false
    score: 0
  - text: Object
    correct: false
    score: 0.2
  - text: public String
    correct: false
    score: 0.3
  - text: get
    correct: false
    score: 0
  - text: name
    correct: false
    score: 0
  - text: return
    correct: false
    score: 0
  - text: int
    correct: false
    score: 0
  - text: I don't know getter method syntax
    correct: false
    score: 0
- question_id: JAVA-ENCAP-006
  text: >
    Write a setter method for a private variable `age` (int) that only accepts positive values. If a negative value is passed, set age to 0.
  question_type: coding
  topic: Encapsulation and Access Modifiers
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    public void setAge(int age) {
        if (age >= 0) {
            this.age = age;
        } else {
            this.age = 0;
        }
    }
  sample_student_answers:
  - text: |
      public void setAge(int age) {
          if (age >= 0) {
              this.age = age;
          } else {
              this.age = 0;
          }
      }
    correct: true
    score: 1
  - text: |
      public void setAge(int age) {
          if (age > 0) {
              this.age = age;
          } else {
              this.age = 0;
          }
      }
    correct: true
    score: 0.9
  - text: |
      public void setAge(int newAge) {
          if (newAge >= 0) {
              age = newAge;
          } else {
              age = 0;
          }
      }
    correct: true
    score: 1
  - text: |
      public void setAge(int age) {
          this.age = (age >= 0) ? age : 0;
      }
    correct: true
    score: 1
  - text: |
      public void setAge(int age) {
          if (age < 0) {
              this.age = 0;
          } else {
              this.age = age;
          }
      }
    correct: true
    score: 1
  - text: |
      public void setAge(int age) {
          if (age >= 0) {
              this.age = age;
          }
      }
    correct: false
    score: 0.6
  - text: |
      public setAge(int age) {
          if (age >= 0) {
              this.age = age;
          } else {
              this.age = 0;
          }
      }
    correct: false
    score: 0.8
  - text: |
      public void setAge(int age) {
          this.age = age;
      }
    correct: false
    score: 0.3
  - text: public void setAge(int age) { if positive then set age else set to 0 }
    correct: false
    score: 0.2
  - text: I'm not sure how to write validation in setters
    correct: false
    score: 0
- question_id: JAVA-INHERIT-001
  text: >
    Create a class `Animal` with a method `makeSound()`, then create a subclass `Dog` that extends Animal and overrides the `makeSound()` method to print "Woof!".
  question_type: coding
  topic: Inheritance and Polymorphism
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    public class Animal {
        public void makeSound() {
            System.out.println("Some generic animal sound");
        }
    }

    public class Dog extends Animal {
        @Override
        public void makeSound() {
            System.out.println("Woof!");
        }
    }
  sample_student_answers:
  - text: |
      public class Animal {
          public void makeSound() {
              System.out.println("Some generic animal sound");
          }
      }

      public class Dog extends Animal {
          @Override
          public void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: true
    score: 1
  - text: |
      public class Animal {
          public void makeSound() {
              System.out.println("Animal sound");
          }
      }

      public class Dog extends Animal {
          public void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: true
    score: 0.9
  - text: |
      class Animal {
          void makeSound() {
              System.out.println("Generic sound");
          }
      }

      class Dog extends Animal {
          void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: true
    score: 0.8
  - text: |
      public class Animal {
          public void makeSound() {
          }
      }

      public class Dog extends Animal {
          public void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: true
    score: 0.8
  - text: |
      public class Animal {
          public void makeSound() {
              System.out.println("Animal sound");
          }
      }

      public class Dog inherits Animal {
          public void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: false
    score: 0.6
  - text: |
      public class Animal {
          public void makeSound();
      }

      public class Dog extends Animal {
          public void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: false
    score: 0.5
  - text: |
      public class Animal {
          public makeSound() {
              System.out.println("Sound");
          }
      }

      public class Dog extends Animal {
          public makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: false
    score: 0.4
  - text: |
      public class Dog extends Animal {
          public void makeSound() {
              System.out.println("Woof!");
          }
      }
    correct: false
    score: 0.3
  - text: class Animal { makeSound(); } class Dog extends Animal { makeSound() prints Woof }
    correct: false
    score: 0.2
  - text: I don't know inheritance syntax
    correct: false
    score: 0
- question_id: JAVA-INHERIT-002
  text: What is the difference between inheritance and polymorphism in Java?
  question_type: short_answer
  topic: Inheritance and Polymorphism
  difficulty: 4
  cognitive_level: comprehension
  reference_answer: Inheritance is when a class (subclass) inherits properties and methods from another class (superclass), creating an 'is-a' relationship. Polymorphism is the ability of objects of different classes to be treated as objects of a common base class, and for each to respond differently to the same method call.
  sample_student_answers:
  - text: Inheritance is when a class extends another class to reuse code. Polymorphism is when different objects respond differently to the same method call.
    correct: true
    score: 1
  - text: Inheritance creates parent-child relationships between classes. Polymorphism allows one interface to represent different underlying forms.
    correct: true
    score: 1
  - text: Inheritance is 'is-a' relationship, polymorphism is 'many forms' - same method name, different implementations.
    correct: true
    score: 0.9
  - text: Inheritance lets you reuse code from parent class. Polymorphism lets you override methods in subclasses.
    correct: true
    score: 0.8
  - text: Inheritance is extending classes, polymorphism is method overriding.
    correct: false
    score: 0.6
  - text: Both are about classes extending other classes.
    correct: false
    score: 0.3
  - text: Inheritance is for code reuse, polymorphism is for encapsulation.
    correct: false
    score: 0.2
  - text: They're both OOP concepts but I'm not sure of the difference.
    correct: false
    score: 0.1
  - text: Polymorphism is multiple inheritance.
    correct: false
    score: 0
  - text: I think they're similar concepts.
    correct: false
    score: 0
- question_id: JAVA-INHERIT-003
  text: |
    What will be the output of this code?
    ```java
    class Shape {
        public void draw() {
            System.out.println("Drawing a shape");
        }
    }

    class Circle extends Shape {
        @Override
        public void draw() {
            System.out.println("Drawing a circle");
        }
    }

    public class Main {
        public static void main(String[] args) {
            Shape s = new Circle();
            s.draw();
        }
    }
    ```
  question_type: code_analysis
  topic: Inheritance and Polymorphism
  difficulty: 3
  cognitive_level: analysis
  reference_answer: Drawing a circle
  sample_student_answers:
  - text: Drawing a circle
    correct: true
    score: 1
  - text: "It prints: Drawing a circle"
    correct: true
    score: 1
  - text: Drawing a circle (because of polymorphism)
    correct: true
    score: 1
  - text: Drawing a circle - the overridden method is called
    correct: true
    score: 1
  - text: Drawing a shape
    correct: false
    score: 0
  - text: Drawing a shape (because s is declared as Shape)
    correct: false
    score: 0
  - text: It will print both messages
    correct: false
    score: 0
  - text: Compile error because you can't assign Circle to Shape
    correct: false
    score: 0
  - text: The actual object type determines which method is called, so Circle's draw()
    correct: false
    score: 0.8
  - text: Not sure about method overriding with different reference types
    correct: false
    score: 0
- question_id: JAVA-INHERIT-004
  text: "True or False: In Java, a class can extend multiple classes at the same time."
  question_type: true_false
  topic: Inheritance and Polymorphism
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: False. Java does not support multiple inheritance for classes. A class can only extend one superclass, but it can implement multiple interfaces.
  sample_student_answers:
  - text: "False"
    correct: true
    score: 1
  - text: False, Java only supports single inheritance for classes.
    correct: true
    score: 1
  - text: False, but you can implement multiple interfaces.
    correct: true
    score: 1
  - text: False, only one parent class allowed.
    correct: true
    score: 1
  - text: "True"
    correct: false
    score: 0
  - text: True, you can extend multiple classes with commas.
    correct: false
    score: 0
  - text: True, that's what interfaces are for.
    correct: false
    score: 0
  - text: False, but I'm not sure about interfaces.
    correct: false
    score: 0.7
  - text: I think False, but multiple inheritance exists somehow.
    correct: false
    score: 0.5
  - text: Not sure about Java's inheritance rules.
    correct: false
    score: 0
- question_id: JAVA-INHERIT-005
  text: >
    Fill in the blank to call the parent class constructor from a subclass constructor:

    ```java

    class Vehicle {
        String brand;
        
        public Vehicle(String brand) {
            this.brand = brand;
        }
    }


    class Car extends Vehicle {
        int doors;
        
        public Car(String brand, int doors) {
            ______(brand);
            this.doors = doors;
        }
    }

    ```
  question_type: fill_blank
  topic: Inheritance and Polymorphism
  difficulty: 3
  cognitive_level: application
  reference_answer: super
  sample_student_answers:
  - text: super
    correct: true
    score: 1
  - text: super(brand)
    correct: false
    score: 0.7
  - text: this
    correct: false
    score: 0.1
  - text: Vehicle
    correct: false
    score: 0.2
  - text: parent
    correct: false
    score: 0
  - text: base
    correct: false
    score: 0
  - text: call
    correct: false
    score: 0
  - text: extends
    correct: false
    score: 0
  - text: new Vehicle
    correct: false
    score: 0.1
  - text: I don't know how to call parent constructors
    correct: false
    score: 0
- question_id: JAVA-INHERIT-006
  text: >
    What's the purpose of method overriding in Java? Provide an example scenario where it would be useful.
  question_type: short_answer
  topic: Inheritance and Polymorphism
  difficulty: 3
  cognitive_level: comprehension
  reference_answer: "Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its parent class. This enables polymorphism and allows objects of different types to respond differently to the same method call. Example: A Shape class with draw() method, where Circle, Rectangle, and Triangle subclasses each override draw() to render their specific shape."
  sample_student_answers:
  - text: "Method overriding lets subclasses provide their own implementation of parent methods. Example: Animal makeSound(), Dog overrides with 'Woof!', Cat with 'Meow!'"
    correct: true
    score: 1
  - text: It allows subclasses to change behavior of inherited methods. Useful for polymorphism - same method call, different behavior based on object type.
    correct: true
    score: 1
  - text: Overriding gives specialized behavior in subclasses. Like Vehicle start() method - Car might start engine, Bicycle might just begin pedaling.
    correct: true
    score: 1
  - text: "To customize parent class methods in child classes. Example: toString() method overridden to show class-specific information."
    correct: true
    score: 0.9
  - text: Method overriding is for changing parent methods in child classes.
    correct: false
    score: 0.5
  - text: It's used for inheritance and polymorphism.
    correct: false
    score: 0.4
  - text: Overriding allows multiple methods with same name.
    correct: false
    score: 0.2
  - text: To add new methods to subclasses.
    correct: false
    score: 0.1
  - text: I think it's related to method overloading.
    correct: false
    score: 0.1
  - text: Not sure about method overriding vs overloading.
    correct: false
    score: 0
- question_id: JAVA-INTERFACE-001
  text: >
    Create an interface called `Drawable` with a method `draw()`, then create a class `Rectangle` that implements this interface.
  question_type: coding
  topic: Interfaces and Abstract Classes
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    public interface Drawable {
        void draw();
    }

    public class Rectangle implements Drawable {
        @Override
        public void draw() {
            System.out.println("Drawing a rectangle");
        }
    }
  sample_student_answers:
  - text: |
      public interface Drawable {
          void draw();
      }

      public class Rectangle implements Drawable {
          @Override
          public void draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: true
    score: 1
  - text: |
      interface Drawable {
          void draw();
      }

      class Rectangle implements Drawable {
          public void draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: true
    score: 0.9
  - text: |
      public interface Drawable {
          public void draw();
      }

      public class Rectangle implements Drawable {
          public void draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: true
    score: 1
  - text: |
      public interface Drawable {
          void draw();
      }

      public class Rectangle implements Drawable {
          public void draw() {
              // Rectangle drawing logic
          }
      }
    correct: true
    score: 0.8
  - text: |
      public interface Drawable {
          abstract void draw();
      }

      public class Rectangle implements Drawable {
          public void draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: true
    score: 0.9
  - text: |
      public interface Drawable {
          void draw() {
              System.out.println("Default drawing");
          }
      }

      public class Rectangle implements Drawable {
          public void draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: false
    score: 0.6
  - text: |
      public class Drawable {
          void draw();
      }

      public class Rectangle extends Drawable {
          public void draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: false
    score: 0.4
  - text: |
      public interface Drawable {
          draw();
      }

      public class Rectangle implements Drawable {
          draw() {
              System.out.println("Drawing a rectangle");
          }
      }
    correct: false
    score: 0.3
  - text: interface Drawable { draw(); } class Rectangle implements Drawable { draw method }
    correct: false
    score: 0.2
  - text: I'm not sure about interface syntax
    correct: false
    score: 0
- question_id: JAVA-INTERFACE-002
  text: What is the difference between an interface and an abstract class in Java?
  question_type: short_answer
  topic: Interfaces and Abstract Classes
  difficulty: 4
  cognitive_level: comprehension
  reference_answer: Interfaces can only have abstract methods (until Java 8 added default methods) and constants, support multiple inheritance, and all methods are implicitly public. Abstract classes can have both abstract and concrete methods, instance variables, constructors, and any access modifiers, but only support single inheritance.
  sample_student_answers:
  - text: Interface has only abstract methods and constants, supports multiple inheritance. Abstract class can have concrete methods and variables, only single inheritance.
    correct: true
    score: 1
  - text: "Interface: all methods abstract, multiple inheritance, no constructors. Abstract class: mix of abstract/concrete methods, single inheritance, can have constructors."
    correct: true
    score: 1
  - text: Interface is pure abstraction with only method signatures. Abstract class can have implementation and is partially abstract.
    correct: true
    score: 0.9
  - text: Abstract class can have regular methods and variables, interface cannot. You implement interface, extend abstract class.
    correct: true
    score: 0.8
  - text: Interface uses 'implements', abstract class uses 'extends'.
    correct: false
    score: 0.4
  - text: Interface is for multiple inheritance, abstract class is for single inheritance.
    correct: false
    score: 0.5
  - text: Abstract class has abstract methods, interface has concrete methods.
    correct: false
    score: 0.1
  - text: They're both abstract and cannot be instantiated.
    correct: false
    score: 0.3
  - text: Interface is public, abstract class can be private.
    correct: false
    score: 0.1
  - text: I think they're very similar concepts.
    correct: false
    score: 0
- question_id: JAVA-INTERFACE-003
  text: |
    What will happen when this code is compiled?
    ```java
    public interface Animal {
        void eat();
        void sleep();
    }

    public class Dog implements Animal {
        public void eat() {
            System.out.println("Dog is eating");
        }
    }
    ```
  question_type: code_analysis
  topic: Interfaces and Abstract Classes
  difficulty: 3
  cognitive_level: analysis
  reference_answer: The code will not compile. Dog class implements Animal interface but doesn't provide implementation for the sleep() method. All methods in an interface must be implemented by the implementing class.
  sample_student_answers:
  - text: Compilation error. Dog must implement all methods from Animal interface, but sleep() is missing.
    correct: true
    score: 1
  - text: Won't compile because Dog doesn't implement sleep() method.
    correct: true
    score: 1
  - text: Compile error - all interface methods must be implemented.
    correct: true
    score: 1
  - text: "Error: Dog is not abstract and does not override abstract method sleep() in Animal"
    correct: true
    score: 1
  - text: The code will compile and run fine.
    correct: false
    score: 0
  - text: Runtime error when trying to call sleep().
    correct: false
    score: 0
  - text: Dog inherits sleep() from Animal interface.
    correct: false
    score: 0
  - text: It will compile but Dog class will be abstract.
    correct: false
    score: 0.2
  - text: Missing method implementations cause warnings, not errors.
    correct: false
    score: 0
  - text: Not sure about interface implementation requirements.
    correct: false
    score: 0
- question_id: JAVA-INTERFACE-004
  text: |
    Complete the following abstract class:
    ```java
    public abstract class Shape {
        protected String color;
        
        public Shape(String color) {
            this.color = color;
        }
        
        // Add abstract method for calculating area
        // Add concrete method to display color
    }
    ```
  question_type: coding
  topic: Interfaces and Abstract Classes
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    ```java
    public abstract class Shape {
        protected String color;
        
        public Shape(String color) {
            this.color = color;
        }
        
        public abstract double getArea();
        
        public void displayColor() {
            System.out.println("Color: " + color);
        }
    }
    ```
  sample_student_answers:
  - text: |
      public abstract double getArea();

      public void displayColor() {
          System.out.println("Color: " + color);
      }
    correct: true
    score: 1
  - text: |
      abstract double getArea();

      public void displayColor() {
          System.out.println("Color: " + color);
      }
    correct: true
    score: 0.9
  - text: |
      public abstract double area();

      public void showColor() {
          System.out.println("Color: " + color);
      }
    correct: true
    score: 0.8
  - text: |
      public double getArea();

      public void displayColor() {
          System.out.println("Color: " + color);
      }
    correct: false
    score: 0.5
  - text: |
      abstract void getArea();

      void displayColor() {
          System.out.println(color);
      }
    correct: false
    score: 0.4
  - text: |
      public abstract getArea();

      public displayColor() {
          System.out.println(color);
      }
    correct: false
    score: 0.2
  - text: public double getArea() { return 0; }
    correct: false
    score: 0.3
  - text: I'm not sure how to write abstract methods
    correct: false
    score: 0
  - text: abstract double area; void display();
    correct: false
    score: 0.1
  - text: ""
    correct: false
    score: 0
- question_id: JAVA-INTERFACE-005
  text: What is the main difference between an interface and an abstract class in Java?
  question_type: short_answer
  topic: Interfaces and Abstract Classes
  difficulty: 4
  cognitive_level: analysis
  reference_answer: An interface can only contain abstract methods (until Java 8) and constants, supports multiple inheritance, and all methods are implicitly public. An abstract class can have both abstract and concrete methods, instance variables, constructors, and supports single inheritance only.
  sample_student_answers:
  - text: Interface has only abstract methods and supports multiple inheritance. Abstract class can have concrete methods and supports single inheritance.
    correct: true
    score: 1
  - text: Interface is fully abstract, abstract class can be partially abstract. A class can implement multiple interfaces but extend only one abstract class.
    correct: true
    score: 1
  - text: Interface methods are public by default, abstract class can have private methods. Interface can't have constructors.
    correct: true
    score: 0.9
  - text: Interface is like a contract, abstract class is like a template.
    correct: true
    score: 0.7
  - text: Interface uses implements keyword, abstract class uses extends.
    correct: true
    score: 0.6
  - text: Interface is better than abstract class.
    correct: false
    score: 0.2
  - text: Abstract class is more abstract than interface.
    correct: false
    score: 0
  - text: Interface can have variables, abstract class cannot.
    correct: false
    score: 0
  - text: Both are the same thing.
    correct: false
    score: 0
  - text: I think interface is for inheritance?
    correct: false
    score: 0.1
- question_id: JAVA-INTERFACE-006
  text: |
    Which of the following statements about interfaces in Java 8+ is TRUE?
    A) Interfaces can have private methods
    B) Interfaces can have default method implementations
    C) Interfaces can have constructors
    D) Interfaces can have instance variables
  question_type: mcq
  topic: Interfaces and Abstract Classes
  difficulty: 4
  cognitive_level: knowledge
  reference_answer: B) Interfaces can have default method implementations. Java 8 introduced default methods in interfaces, allowing concrete method implementations.
  sample_student_answers:
  - text: B
    correct: true
    score: 1
  - text: B) Interfaces can have default method implementations
    correct: true
    score: 1
  - text: Option B is correct - default methods were added in Java 8
    correct: true
    score: 1
  - text: B, Java 8 allows default methods in interfaces
    correct: true
    score: 1
  - text: A
    correct: false
    score: 0
  - text: C
    correct: false
    score: 0
  - text: D
    correct: false
    score: 0
  - text: A) Interfaces can have private methods
    correct: false
    score: 0
  - text: I think it's C because interfaces need constructors
    correct: false
    score: 0
  - text: Not sure, maybe A or B?
    correct: false
    score: 0.1
- question_id: JAVA-EXCEPTION-001
  text: |
    What will be the output of this code?
    ```java
    public class ExceptionTest {
        public static void main(String[] args) {
            try {
                int result = 10 / 0;
                System.out.println("Result: " + result);
            } catch (ArithmeticException e) {
                System.out.println("Cannot divide by zero");
            }
            System.out.println("Program continues");
        }
    }
    ```
  question_type: code_analysis
  topic: Exception Handling and Try-Catch
  difficulty: 2
  cognitive_level: application
  reference_answer: |
    Cannot divide by zero
    Program continues
  sample_student_answers:
  - text: |
      Cannot divide by zero
      Program continues
    correct: true
    score: 1
  - text: |-
      Cannot divide by zero
      Program continues
    correct: true
    score: 1
  - text: First it prints 'Cannot divide by zero', then 'Program continues'
    correct: true
    score: 0.9
  - text: Cannot divide by zero and then Program continues
    correct: true
    score: 0.8
  - text: |-
      Result: Infinity
      Program continues
    correct: false
    score: 0
  - text: The program crashes with ArithmeticException
    correct: false
    score: 0
  - text: |-
      Result: 10
      Program continues
    correct: false
    score: 0
  - text: Only 'Cannot divide by zero' is printed
    correct: false
    score: 0.3
  - text: Exception is thrown and program stops
    correct: false
    score: 0
  - text: I'm not sure about exception handling
    correct: false
    score: 0
- question_id: JAVA-EXCEPTION-002
  text: What is the purpose of the 'finally' block in Java exception handling?
  question_type: short_answer
  topic: Exception Handling and Try-Catch
  difficulty: 3
  cognitive_level: comprehension
  reference_answer: The finally block contains code that always executes regardless of whether an exception occurs or not. It's typically used for cleanup operations like closing files, database connections, or releasing resources.
  sample_student_answers:
  - text: Finally block always executes, whether exception occurs or not. Used for cleanup operations.
    correct: true
    score: 1
  - text: Code in finally block runs no matter what happens in try-catch. Good for closing resources.
    correct: true
    score: 1
  - text: Finally ensures certain code runs even if there's an exception.
    correct: true
    score: 0.8
  - text: It's for cleanup code that must always run.
    correct: true
    score: 0.7
  - text: Finally block executes after try block.
    correct: true
    score: 0.6
  - text: Finally only runs when there's no exception.
    correct: false
    score: 0
  - text: Finally catches exceptions that try-catch missed.
    correct: false
    score: 0
  - text: Finally is the same as catch but runs last.
    correct: false
    score: 0
  - text: I think finally is optional and doesn't do much.
    correct: false
    score: 0.1
  - text: Finally means the program is finished.
    correct: false
    score: 0
- question_id: JAVA-EXCEPTION-003
  text: |
    Fill in the blank to catch a specific type of exception:
    ```java
    try {
        String str = null;
        int length = str.length();
    } catch (_______ e) {
        System.out.println("Null pointer error");
    }
    ```
  question_type: fill_blank
  topic: Exception Handling and Try-Catch
  difficulty: 2
  cognitive_level: application
  reference_answer: NullPointerException
  sample_student_answers:
  - text: NullPointerException
    correct: true
    score: 1
  - text: NullPointerException
    correct: true
    score: 1
  - text: java.lang.NullPointerException
    correct: true
    score: 1
  - text: NullException
    correct: false
    score: 0.3
  - text: RuntimeException
    correct: false
    score: 0.5
  - text: Exception
    correct: false
    score: 0.4
  - text: NullError
    correct: false
    score: 0.2
  - text: PointerException
    correct: false
    score: 0.2
  - text: NullReference
    correct: false
    score: 0.1
  - text: I don't know exception types
    correct: false
    score: 0
- question_id: JAVA-EXCEPTION-004
  text: |
    Which of the following is NOT a valid way to handle exceptions in Java?
    A) try-catch
    B) try-catch-finally
    C) try-finally
    D) catch-finally
  question_type: mcq
  topic: Exception Handling and Try-Catch
  difficulty: 3
  cognitive_level: knowledge
  reference_answer: D) catch-finally. You cannot have catch-finally without a try block. The try block is mandatory for exception handling.
  sample_student_answers:
  - text: D
    correct: true
    score: 1
  - text: D) catch-finally
    correct: true
    score: 1
  - text: Option D - you need try block first
    correct: true
    score: 1
  - text: D, catch-finally is invalid without try
    correct: true
    score: 1
  - text: A
    correct: false
    score: 0
  - text: B
    correct: false
    score: 0
  - text: C
    correct: false
    score: 0
  - text: C) try-finally doesn't make sense
    correct: false
    score: 0
  - text: I think all are valid
    correct: false
    score: 0
  - text: Not sure about exception syntax
    correct: false
    score: 0
- question_id: JAVA-EXCEPTION-005
  text: |
    Complete the exception handling code:
    ```java
    public static int divide(int a, int b) {
        try {
            return a / b;
        } catch (ArithmeticException e) {
            System.out.println("Division by zero!");
            // What should be returned here?
        }
    }
    ```
  question_type: coding
  topic: Exception Handling and Try-Catch
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    ```java
    public static int divide(int a, int b) {
        try {
            return a / b;
        } catch (ArithmeticException e) {
            System.out.println("Division by zero!");
            return 0; // or throw e; or return -1;
        }
    }
    ```
  sample_student_answers:
  - text: return 0;
    correct: true
    score: 1
  - text: return -1;
    correct: true
    score: 1
  - text: throw e;
    correct: true
    score: 1
  - text: return Integer.MIN_VALUE;
    correct: true
    score: 0.9
  - text: throw new ArithmeticException();
    correct: true
    score: 0.8
  - text: return;
    correct: false
    score: 0
  - text: System.exit(1);
    correct: false
    score: 0.2
  - text: break;
    correct: false
    score: 0
  - text: Nothing, method ends
    correct: false
    score: 0
  - text: I don't know what to return
    correct: false
    score: 0
- question_id: JAVA-EXCEPTION-006
  text: |
    What will happen when this code runs?
    ```java
    public class Test {
        public static void main(String[] args) {
            try {
                int[] arr = new int[3];
                System.out.println(arr[5]);
            } catch (NullPointerException e) {
                System.out.println("Null pointer caught");
            } catch (Exception e) {
                System.out.println("General exception caught");
            }
        }
    }
    ```
  question_type: code_analysis
  topic: Exception Handling and Try-Catch
  difficulty: 4
  cognitive_level: analysis
  reference_answer: General exception caught - The code will throw an ArrayIndexOutOfBoundsException (not NullPointerException), which will be caught by the general Exception catch block.
  sample_student_answers:
  - text: General exception caught
    correct: true
    score: 1
  - text: "The second catch block executes: 'General exception caught'"
    correct: true
    score: 1
  - text: ArrayIndexOutOfBoundsException is caught by Exception catch block
    correct: true
    score: 1
  - text: It prints 'General exception caught' because array index is out of bounds
    correct: true
    score: 1
  - text: Null pointer caught
    correct: false
    score: 0
  - text: Program crashes with ArrayIndexOutOfBoundsException
    correct: false
    score: 0
  - text: Both catch blocks execute
    correct: false
    score: 0
  - text: No exception occurs, prints array value
    correct: false
    score: 0
  - text: The program won't compile
    correct: false
    score: 0
  - text: I'm confused about exception types
    correct: false
    score: 0
- question_id: JAVA-FILE-001
  text: |
    What will this code do?
    ```java
    import java.io.*;

    public class FileTest {
        public static void main(String[] args) {
            try {
                FileWriter writer = new FileWriter("output.txt");
                writer.write("Hello World");
                writer.close();
            } catch (IOException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }
    ```
  question_type: code_analysis
  topic: File Reading and Writing
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: The code creates a file named 'output.txt' and writes 'Hello World' to it. If successful, the file is created/overwritten with the text. If there's an I/O error, it prints an error message.
  sample_student_answers:
  - text: Creates output.txt file and writes 'Hello World' to it
    correct: true
    score: 1
  - text: Writes 'Hello World' to a file called output.txt
    correct: true
    score: 1
  - text: Creates/overwrites output.txt with Hello World text
    correct: true
    score: 1
  - text: File output.txt is created with Hello World content
    correct: true
    score: 0.9
  - text: It writes to a file and closes it
    correct: true
    score: 0.7
  - text: Reads Hello World from output.txt
    correct: false
    score: 0
  - text: Prints Hello World to console
    correct: false
    score: 0
  - text: Copies Hello World to output.txt
    correct: false
    score: 0.3
  - text: The code will crash because file doesn't exist
    correct: false
    score: 0
  - text: I don't understand file operations
    correct: false
    score: 0
- question_id: JAVA-FILE-002
  text: Which import statement is required for basic file reading operations in Java?
  question_type: short_answer
  topic: File Reading and Writing
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: import java.io.*; or specific imports like import java.io.FileReader; import java.io.BufferedReader; import java.io.IOException;
  sample_student_answers:
  - text: import java.io.*;
    correct: true
    score: 1
  - text: java.io.*
    correct: true
    score: 0.9
  - text: import java.io.FileReader;
    correct: true
    score: 1
  - text: import java.io.BufferedReader;
    correct: true
    score: 0.9
  - text: import java.io.IOException;
    correct: true
    score: 0.8
  - text: import java.file.*;
    correct: false
    score: 0
  - text: import java.util.*;
    correct: false
    score: 0
  - text: import java.lang.*;
    correct: false
    score: 0
  - text: import files;
    correct: false
    score: 0
  - text: I think it's something with io
    correct: false
    score: 0.2
- question_id: JAVA-FILE-003
  text: >
    Fill in the blank to read a line from a file:

    ```java

    try {
        BufferedReader reader = new BufferedReader(new FileReader("input.txt"));
        String line = reader.________();
        System.out.println(line);
        reader.close();
    } catch (IOException e) {
        e.printStackTrace();
    }

    ```
  question_type: fill_blank
  topic: File Reading and Writing
  difficulty: 2
  cognitive_level: application
  reference_answer: readLine
  sample_student_answers:
  - text: readLine
    correct: true
    score: 1
  - text: readLine()
    correct: true
    score: 1
  - text: read
    correct: false
    score: 0.3
  - text: readline
    correct: false
    score: 0.7
  - text: nextLine
    correct: false
    score: 0.2
  - text: getLine
    correct: false
    score: 0.1
  - text: readNext
    correct: false
    score: 0.1
  - text: scan
    correct: false
    score: 0
  - text: input
    correct: false
    score: 0
  - text: I don't know BufferedReader methods
    correct: false
    score: 0
- question_id: JAVA-FILE-004
  text: |
    Which of the following is the BEST practice for file handling in Java?
    A) Always use FileWriter without try-catch
    B) Use try-with-resources to automatically close files
    C) Never close files manually
    D) Only catch RuntimeException for file operations
  question_type: mcq
  topic: File Reading and Writing
  difficulty: 4
  cognitive_level: evaluation
  reference_answer: B) Use try-with-resources to automatically close files. This ensures files are properly closed even if exceptions occur, preventing resource leaks.
  sample_student_answers:
  - text: B
    correct: true
    score: 1
  - text: B) Use try-with-resources to automatically close files
    correct: true
    score: 1
  - text: Option B - try-with-resources is best practice
    correct: true
    score: 1
  - text: B, it handles closing automatically
    correct: true
    score: 1
  - text: A
    correct: false
    score: 0
  - text: C
    correct: false
    score: 0
  - text: D
    correct: false
    score: 0
  - text: C) Never close files manually - Java does it automatically
    correct: false
    score: 0
  - text: A seems right, simpler code
    correct: false
    score: 0
  - text: Not sure about file best practices
    correct: false
    score: 0
- question_id: JAVA-FILE-005
  text: |
    Complete the code to write multiple lines to a file:
    ```java
    try (PrintWriter writer = new PrintWriter("data.txt")) {
        writer.println("Line 1");
        writer.println("Line 2");
        // Add code to ensure data is written to file
    } catch (IOException e) {
        e.printStackTrace();
    }
    ```
  question_type: coding
  topic: File Reading and Writing
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    ```java
    try (PrintWriter writer = new PrintWriter("data.txt")) {
        writer.println("Line 1");
        writer.println("Line 2");
        writer.flush(); // or just let try-with-resources handle closing
    } catch (IOException e) {
        e.printStackTrace();
    }
    ```
  sample_student_answers:
  - text: writer.flush();
    correct: true
    score: 1
  - text: writer.close();
    correct: true
    score: 0.8
  - text: // No additional code needed - try-with-resources handles it
    correct: true
    score: 1
  - text: writer.flush(); // Ensure data is written
    correct: true
    score: 1
  - text: writer.write();
    correct: false
    score: 0
  - text: writer.save();
    correct: false
    score: 0
  - text: writer.commit();
    correct: false
    score: 0
  - text: System.out.flush();
    correct: false
    score: 0
  - text: writer.finish();
    correct: false
    score: 0
  - text: I don't know how to ensure file writing
    correct: false
    score: 0
- question_id: JAVA-FILE-006
  text: |
    What will happen if this code tries to read from a non-existent file?
    ```java
    try (Scanner scanner = new Scanner(new File("missing.txt"))) {
        while (scanner.hasNextLine()) {
            System.out.println(scanner.nextLine());
        }
    } catch (FileNotFoundException e) {
        System.out.println("File not found");
    }
    ```
  question_type: code_analysis
  topic: File Reading and Writing
  difficulty: 3
  cognitive_level: analysis
  reference_answer: The code will catch the FileNotFoundException and print 'File not found'. The program continues normally after handling the exception.
  sample_student_answers:
  - text: Prints 'File not found' and continues execution
    correct: true
    score: 1
  - text: FileNotFoundException is caught and 'File not found' is printed
    correct: true
    score: 1
  - text: It prints 'File not found' because the file doesn't exist
    correct: true
    score: 1
  - text: Catches exception and prints the error message
    correct: true
    score: 0.9
  - text: The program crashes with FileNotFoundException
    correct: false
    score: 0
  - text: Nothing happens, just continues
    correct: false
    score: 0
  - text: Creates the missing.txt file automatically
    correct: false
    score: 0
  - text: Compilation error because file doesn't exist
    correct: false
    score: 0
  - text: Scanner throws RuntimeException
    correct: false
    score: 0
  - text: I'm not sure about file exceptions
    correct: false
    score: 0
- question_id: JAVA-JAVAFX-001
  text: What is the main purpose of JavaFX in Java programming?
  question_type: short_answer
  topic: JavaFX Basics and GUI Events
  difficulty: 2
  cognitive_level: comprehension
  reference_answer: JavaFX is used to create graphical user interfaces (GUI) and rich desktop applications in Java. It provides tools for creating windows, buttons, text fields, and handling user interactions like clicks and keyboard input.
  sample_student_answers:
  - text: JavaFX is for creating graphical user interfaces and desktop applications
    correct: true
    score: 1
  - text: To build GUI applications with windows, buttons, and user interactions
    correct: true
    score: 1
  - text: Creating desktop applications with graphics and user interface elements
    correct: true
    score: 0.9
  - text: JavaFX makes GUI programming easier in Java
    correct: true
    score: 0.8
  - text: For making applications with buttons and windows
    correct: true
    score: 0.7
  - text: JavaFX is for web development
    correct: false
    score: 0
  - text: It's for making Java programs faster
    correct: false
    score: 0
  - text: JavaFX handles database connections
    correct: false
    score: 0
  - text: I think it's for mobile apps
    correct: false
    score: 0
  - text: Not sure what JavaFX does
    correct: false
    score: 0
- question_id: JAVA-JAVAFX-002
  text: |
    What will this JavaFX code create?
    ```java
    import javafx.application.Application;
    import javafx.scene.Scene;
    import javafx.scene.control.Button;
    import javafx.scene.layout.VBox;
    import javafx.stage.Stage;

    public class SimpleApp extends Application {
        public void start(Stage stage) {
            Button btn1 = new Button("Click Me");
            Button btn2 = new Button("Exit");
            
            VBox root = new VBox(btn1, btn2);
            Scene scene = new Scene(root, 200, 100);
            
            stage.setScene(scene);
            stage.show();
        }
    }
    ```
  question_type: code_analysis
  topic: JavaFX Basics and GUI Events
  difficulty: 3
  cognitive_level: comprehension
  reference_answer: The code creates a JavaFX window with two buttons ('Click Me' and 'Exit') arranged vertically in a VBox layout. The window is 200 pixels wide and 100 pixels tall.
  sample_student_answers:
  - text: "A window with two buttons stacked vertically: 'Click Me' and 'Exit'"
    correct: true
    score: 1
  - text: JavaFX window containing two buttons arranged in vertical layout
    correct: true
    score: 1
  - text: A 200x100 window with Click Me and Exit buttons in VBox
    correct: true
    score: 1
  - text: GUI window with two buttons, one above the other
    correct: true
    score: 0.9
  - text: Two buttons in a vertical box layout
    correct: true
    score: 0.8
  - text: A window with two buttons side by side
    correct: false
    score: 0.3
  - text: Just one button that says Click Me
    correct: false
    score: 0.2
  - text: A web page with buttons
    correct: false
    score: 0
  - text: The code won't compile
    correct: false
    score: 0
  - text: I don't understand JavaFX layouts
    correct: false
    score: 0
- question_id: JAVA-JAVAFX-003
  text: |
    Fill in the blank to handle a button click event:
    ```java
    Button button = new Button("Click Me");
    button.________(() -> {
        System.out.println("Button clicked!");
    });
    ```
  question_type: fill_blank
  topic: JavaFX Basics and GUI Events
  difficulty: 3
  cognitive_level: application
  reference_answer: setOnAction
  sample_student_answers:
  - text: setOnAction
    correct: true
    score: 1
  - text: setOnAction
    correct: true
    score: 1
  - text: setAction
    correct: false
    score: 0.4
  - text: onClick
    correct: false
    score: 0.3
  - text: addActionListener
    correct: false
    score: 0.2
  - text: setClickHandler
    correct: false
    score: 0.1
  - text: onAction
    correct: false
    score: 0.3
  - text: addEventListener
    correct: false
    score: 0.1
  - text: setEventHandler
    correct: false
    score: 0.2
  - text: I don't know JavaFX event methods
    correct: false
    score: 0
- question_id: JAVA-JAVAFX-004
  text: >
    Which JavaFX layout manager would you use to arrange components in a grid pattern?

    A) VBox

    B) HBox

    C) GridPane

    D) BorderPane
  question_type: mcq
  topic: JavaFX Basics and GUI Events
  difficulty: 2
  cognitive_level: knowledge
  reference_answer: C) GridPane. GridPane allows you to arrange components in rows and columns, creating a grid-like layout.
  sample_student_answers:
  - text: C
    correct: true
    score: 1
  - text: C) GridPane
    correct: true
    score: 1
  - text: Option C - GridPane is for grid layouts
    correct: true
    score: 1
  - text: GridPane because it makes grids
    correct: true
    score: 1
  - text: A
    correct: false
    score: 0
  - text: B
    correct: false
    score: 0
  - text: D
    correct: false
    score: 0
  - text: A) VBox arranges things in grids
    correct: false
    score: 0
  - text: B) HBox can make grids horizontally
    correct: false
    score: 0
  - text: Not sure about JavaFX layouts
    correct: false
    score: 0
- question_id: JAVA-JAVAFX-005
  text: |
    Complete the JavaFX application structure:
    ```java
    import javafx.application.Application;
    import javafx.stage.Stage;

    public class MyApp extends Application {
        public void _______(Stage primaryStage) {
            // Application code here
            primaryStage.setTitle("My App");
            primaryStage.show();
        }
        
        public static void main(String[] args) {
            _______();
        }
    }
    ```
  question_type: coding
  topic: JavaFX Basics and GUI Events
  difficulty: 3
  cognitive_level: application
  reference_answer: |
    ```java
    public void start(Stage primaryStage) {
        // Application code here
        primaryStage.setTitle("My App");
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
    ```
  sample_student_answers:
  - text: |
      start
      launch(args)
    correct: true
    score: 1
  - text: |
      start
      launch()
    correct: true
    score: 0.9
  - text: |
      start(Stage primaryStage)
      launch(args)
    correct: true
    score: 1
  - text: |
      begin
      launch(args)
    correct: false
    score: 0.3
  - text: |
      start
      run(args)
    correct: false
    score: 0.5
  - text: |
      init
      launch(args)
    correct: false
    score: 0.4
  - text: |
      main
      start()
    correct: false
    score: 0.1
  - text: |
      run
      execute()
    correct: false
    score: 0
  - text: I don't know JavaFX method names
    correct: false
    score: 0
  - text: ""
    correct: false
    score: 0
- question_id: JAVA-JAVAFX-006
  text: |
    What will happen when this button is clicked?
    ```java
    TextField textField = new TextField();
    Button button = new Button("Clear");

    button.setOnAction(e -> {
        textField.setText("");
        System.out.println("Text cleared");
    });
    ```
  question_type: code_analysis
  topic: JavaFX Basics and GUI Events
  difficulty: 3
  cognitive_level: analysis
  reference_answer: When the button is clicked, the text field will be cleared (set to empty string) and 'Text cleared' will be printed to the console.
  sample_student_answers:
  - text: The text field is cleared and 'Text cleared' is printed to console
    correct: true
    score: 1
  - text: TextField becomes empty and prints 'Text cleared'
    correct: true
    score: 1
  - text: Clears the text field and outputs message to console
    correct: true
    score: 1
  - text: Text field is set to empty string, console shows 'Text cleared'
    correct: true
    score: 1
  - text: Only clears the text field
    correct: false
    score: 0.5
  - text: Only prints 'Text cleared'
    correct: false
    score: 0.5
  - text: Button text changes to empty
    correct: false
    score: 0
  - text: Creates a new empty text field
    correct: false
    score: 0
  - text: Nothing happens, just a click
    correct: false
    score: 0
  - text: I'm not sure about event handling
    correct: false
    score: 0
