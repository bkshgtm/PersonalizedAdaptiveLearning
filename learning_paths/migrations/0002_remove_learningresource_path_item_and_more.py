# Generated by Django 5.1.7 on 2025-06-18 05:09

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0005_alter_question_question_type_and_more"),
        ("learning_paths", "0001_initial"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="learningresource",
            name="path_item",
        ),
        migrations.RemoveField(
            model_name="learningresource",
            name="resource",
        ),
        migrations.RemoveField(
            model_name="pathcheckpoint",
            name="path",
        ),
        migrations.RemoveField(
            model_name="pathcheckpoint",
            name="topics",
        ),
        migrations.RemoveField(
            model_name="pathgenerationjob",
            name="course",
        ),
        migrations.RemoveField(
            model_name="pathgenerationjob",
            name="generator",
        ),
        migrations.RemoveField(
            model_name="pathgenerationjob",
            name="knowledge_graph",
        ),
        migrations.RemoveField(
            model_name="pathgenerationjob",
            name="prediction_batch",
        ),
        migrations.RemoveField(
            model_name="pathgenerationjob",
            name="student",
        ),
        migrations.RemoveField(
            model_name="pathgenerator",
            name="created_by",
        ),
        migrations.AlterUniqueTogether(
            name="learningpath",
            unique_together={("student", "course", "generated_at")},
        ),
        migrations.AddField(
            model_name="learningpath",
            name="last_accessed",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="learningpath",
            name="recommended_topics_count",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="learningpath",
            name="student_stats",
            field=models.JSONField(
                default=dict, help_text="Student profile and performance statistics"
            ),
        ),
        migrations.AddField(
            model_name="learningpath",
            name="total_estimated_time",
            field=models.FloatField(
                default=0.0, help_text="Total estimated learning time in hours"
            ),
        ),
        migrations.AddField(
            model_name="learningpath",
            name="weak_topics_count",
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="learningpath",
            name="name",
            field=models.CharField(
                default="Personalized Learning Path", max_length=200
            ),
        ),
        migrations.AlterField(
            model_name="learningpath",
            name="overall_progress",
            field=models.FloatField(
                default=0.0, help_text="Overall completion percentage (0-100)"
            ),
        ),
        migrations.CreateModel(
            name="LearningPathProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_time_spent",
                    models.DurationField(default=datetime.timedelta(0)),
                ),
                ("last_study_session", models.DateTimeField(blank=True, null=True)),
                ("study_streak_days", models.IntegerField(default=0)),
                ("topics_started", models.IntegerField(default=0)),
                ("topics_completed", models.IntegerField(default=0)),
                ("resources_viewed", models.IntegerField(default=0)),
                ("resources_completed", models.IntegerField(default=0)),
                (
                    "average_session_time",
                    models.DurationField(default=datetime.timedelta(0)),
                ),
                (
                    "completion_rate",
                    models.FloatField(
                        default=0.0, help_text="Percentage of started topics completed"
                    ),
                ),
                (
                    "milestones_achieved",
                    models.JSONField(
                        default=list, help_text="List of achieved milestone names"
                    ),
                ),
                ("next_milestone", models.CharField(blank=True, max_length=200)),
                (
                    "learning_path",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_detail",
                        to="learning_paths.learningpath",
                    ),
                ),
            ],
            options={
                "verbose_name": "Learning Path Progress",
                "verbose_name_plural": "Learning Path Progress",
            },
        ),
        migrations.CreateModel(
            name="RecommendedTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        help_text="Confidence score for this recommendation (0-1)"
                    ),
                ),
                (
                    "recommended_difficulty",
                    models.CharField(default="intermediate", max_length=20),
                ),
                (
                    "estimated_time_hours",
                    models.FloatField(help_text="Estimated time to complete in hours"),
                ),
                (
                    "prerequisites",
                    models.JSONField(
                        default=list, help_text="List of prerequisite topic names"
                    ),
                ),
                (
                    "unmet_prerequisites",
                    models.JSONField(
                        default=list, help_text="List of unmet prerequisite topic names"
                    ),
                ),
                (
                    "should_study_prerequisites_first",
                    models.BooleanField(default=False),
                ),
                (
                    "related_topics",
                    models.JSONField(
                        default=list, help_text="List of related topic names"
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        help_text="Priority order (1 = highest priority)"
                    ),
                ),
                ("completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                (
                    "progress_percentage",
                    models.FloatField(
                        default=0.0, help_text="Completion percentage (0-100)"
                    ),
                ),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommended_topics",
                        to="learning_paths.learningpath",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.topic"
                    ),
                ),
            ],
            options={
                "ordering": ["learning_path", "priority"],
                "unique_together": {("learning_path", "topic")},
            },
        ),
        migrations.CreateModel(
            name="StudySession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField()),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
                (
                    "resources_accessed",
                    models.JSONField(
                        default=list, help_text="List of resource IDs accessed"
                    ),
                ),
                ("topics_completed", models.IntegerField(default=0)),
                ("resources_completed", models.IntegerField(default=0)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Student notes from this session"
                    ),
                ),
                (
                    "effectiveness_rating",
                    models.IntegerField(
                        blank=True, help_text="Self-rated effectiveness 1-5", null=True
                    ),
                ),
                (
                    "difficulty_rating",
                    models.IntegerField(
                        blank=True, help_text="Self-rated difficulty 1-5", null=True
                    ),
                ),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="study_sessions",
                        to="learning_paths.learningpath",
                    ),
                ),
                (
                    "topics_studied",
                    models.ManyToManyField(
                        related_name="study_sessions", to="core.topic"
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="TopicResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("description", models.TextField()),
                ("url", models.URLField(max_length=500)),
                ("resource_type", models.CharField(max_length=50)),
                ("difficulty", models.CharField(max_length=20)),
                (
                    "estimated_time",
                    models.FloatField(help_text="Estimated time in hours"),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                ("viewed", models.BooleanField(default=False)),
                ("viewed_at", models.DateTimeField(blank=True, null=True)),
                ("completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "rating",
                    models.IntegerField(
                        blank=True, help_text="User rating 1-5", null=True
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Student notes about this resource"
                    ),
                ),
                (
                    "recommended_topic",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="learning_paths.recommendedtopic",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="PathFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("helpful", "Helpful"),
                            ("not_helpful", "Not Helpful"),
                            ("too_easy", "Too Easy"),
                            ("too_hard", "Too Hard"),
                            ("wrong_order", "Wrong Order"),
                            ("missing_topics", "Missing Topics"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("rating", models.IntegerField(help_text="Rating 1-5")),
                ("comment", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="learning_paths.learningpath",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific topic this feedback relates to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.topic",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific resource this feedback relates to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning_paths.topicresource",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WeakTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_mastery",
                    models.FloatField(help_text="Current mastery score (0-1)"),
                ),
                (
                    "prerequisites",
                    models.JSONField(
                        default=list, help_text="List of prerequisite topic names"
                    ),
                ),
                (
                    "related_topics",
                    models.JSONField(
                        default=list, help_text="List of related topic names"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "learning_path",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weak_topics",
                        to="learning_paths.learningpath",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.topic"
                    ),
                ),
            ],
            options={
                "ordering": ["learning_path", "order"],
                "unique_together": {("learning_path", "topic")},
            },
        ),
        migrations.AddField(
            model_name="topicresource",
            name="weak_topic",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="resources",
                to="learning_paths.weaktopic",
            ),
        ),
        migrations.DeleteModel(
            name="LearningPathItem",
        ),
        migrations.DeleteModel(
            name="LearningResource",
        ),
        migrations.DeleteModel(
            name="PathCheckpoint",
        ),
        migrations.DeleteModel(
            name="PathGenerator",
        ),
        migrations.RemoveField(
            model_name="learningpath",
            name="estimated_completion_time",
        ),
        migrations.RemoveField(
            model_name="learningpath",
            name="generation_job",
        ),
        migrations.DeleteModel(
            name="PathGenerationJob",
        ),
    ]
