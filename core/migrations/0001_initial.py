# Generated by Django 5.1.7 on 2025-04-02 03:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "course_id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["course_id"],
            },
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "assessment_id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("quiz", "Quiz"),
                            ("exam", "Exam"),
                            ("assignment", "Assignment"),
                            ("project", "Project"),
                        ],
                        max_length=20,
                    ),
                ),
                ("date", models.DateTimeField()),
                ("proctored", models.BooleanField(default=False)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessments",
                        to="core.course",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "student_id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("major", models.CharField(max_length=100)),
                (
                    "academic_level",
                    models.CharField(
                        choices=[
                            ("freshman", "Freshman"),
                            ("sophomore", "Sophomore"),
                            ("junior", "Junior"),
                            ("senior", "Senior"),
                            ("graduate", "Graduate"),
                        ],
                        max_length=20,
                    ),
                ),
                ("gpa", models.FloatField()),
                ("prior_knowledge_score", models.FloatField(blank=True, null=True)),
                (
                    "study_frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-Weekly"),
                            ("monthly", "Monthly"),
                            ("rarely", "Rarely"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "attendance_rate",
                    models.FloatField(help_text="Percentage of attendance"),
                ),
                (
                    "participation_score",
                    models.FloatField(
                        help_text="Score for participation in forums, etc."
                    ),
                ),
                ("last_login_date", models.DateTimeField(blank=True, null=True)),
                ("total_time_spent", models.DurationField(blank=True, null=True)),
                (
                    "average_time_per_session",
                    models.DurationField(blank=True, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["student_id"],
            },
        ),
        migrations.AddField(
            model_name="course",
            name="students",
            field=models.ManyToManyField(
                blank=True, related_name="courses", to="core.student"
            ),
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="topics",
                        to="core.course",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subtopics",
                        to="core.topic",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "unique_together": {("name", "course")},
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("url", models.URLField()),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("video", "Video"),
                            ("document", "Document"),
                            ("exercise", "Exercise"),
                            ("tutorial", "Tutorial"),
                            ("quiz", "Quiz"),
                            ("example", "Example"),
                            ("reference", "Reference"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "estimated_time",
                    models.DurationField(
                        help_text="Estimated time to complete resource"
                    ),
                ),
                (
                    "topics",
                    models.ManyToManyField(related_name="resources", to="core.topic"),
                ),
            ],
            options={
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "question_id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("text", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("mcq", "Multiple Choice"),
                            ("coding", "Coding"),
                            ("fill_blank", "Fill in the Blank"),
                            ("short_answer", "Short Answer"),
                            ("essay", "Essay"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="core.assessment",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="questions",
                        to="core.topic",
                    ),
                ),
            ],
            options={
                "ordering": ["question_id"],
            },
        ),
        migrations.CreateModel(
            name="StudentInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("response", models.TextField(blank=True)),
                ("correct", models.BooleanField()),
                ("score", models.FloatField(blank=True, null=True)),
                (
                    "time_taken",
                    models.DurationField(help_text="Time taken to answer question"),
                ),
                ("timestamp", models.DateTimeField()),
                ("attempt_number", models.PositiveIntegerField(default=1)),
                ("resource_viewed_before", models.BooleanField(default=False)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to="core.question",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to="core.student",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "unique_together": {("student", "question", "attempt_number")},
            },
        ),
        migrations.CreateModel(
            name="KnowledgeState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "proficiency_score",
                    models.FloatField(
                        help_text="Score between 0-1 representing mastery level"
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        help_text="Confidence in the proficiency score prediction (0-1)"
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_states",
                        to="core.student",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_states",
                        to="core.topic",
                    ),
                ),
            ],
            options={
                "ordering": ["-last_updated"],
                "unique_together": {("student", "topic")},
            },
        ),
    ]
